<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[支付宝手机网站支付(PHP)]]></title>
    <url>%2F2018%2F04%2F07%2Falipay-wap%2F</url>
    <content type="text"><![CDATA[关于接入的步骤可以参考上一篇《支付宝APP支付服务端接入(PHP)》，详细可以看官方文档下面就不多说了，接入开发，首先还是下载官方的sdk,然后进行调用。实现方法手机网站支付请求示例12345678910111213141516171819202122232425262728293031public function alipay()&#123; require_once("alipay/wappay/service/AlipayTradeService.php"); require_once("alipay/wappay/buildermodel/AlipayTradeWapPayContentBuilder.php"); require_once("alipay/config.php"); //商户订单号，商户网站订单系统中唯一订单号，必填 $out_trade_no = '商户订单号'; //订单名称，必填 $subject = '订单名称'; //付款金额，必填 $total_amount = '付款金额'; //商品描述，可空 $body = '商品描述'; //超时时间 $timeout_express="1m"; $payRequestBuilder = new \AlipayTradeWapPayContentBuilder(); $payRequestBuilder-&gt;setBody($body); $payRequestBuilder-&gt;setSubject($subject); $payRequestBuilder-&gt;setOutTradeNo($out_trade_no); $payRequestBuilder-&gt;setTotalAmount($total_amount); $payRequestBuilder-&gt;setTimeExpress($timeout_express); $payResponse = new \AlipayTradeService($config); $payResponse-&gt;wapPay($payRequestBuilder,$config['return_url'],$config['notify_url']); &#125; 调起支付宝app支付示例1234567891011121314151617181920212223//由于微信浏览器屏蔽支付宝链接 官方给出跳出微信环境支付的解决方案 引入ap.js（将ap.js和pay.htm放在网站根目录）&lt;script type="text/javascript" src="ap.js"&gt;&lt;/script&gt; &lt;script&gt; $(document).on('click','[data-role="alipay"]',function (e) &#123; var order_id = $(this).attr('data-id'); var ua = window.navigator.userAgent.toLowerCase(); $.post("&#123;:U('xxx/xxx/alipay')&#125;",&#123;order_id:order_id&#125;,function (res) &#123; if(res.status==false)&#123; $.toast(res.info); &#125;else &#123; if(ua.match(/MicroMessenger/i) == 'micromessenger')&#123;//判断微信浏览器 e.preventDefault(); e.stopPropagation(); e.stopImmediatePropagation(); _AP.pay(res); return false; &#125;else&#123; window.location.href = res; &#125; &#125; &#125;); &#125;) &lt;/script&gt; 回调示例12345678910111213141516171819202122232425262728293031323334353637383940414243444546public function alipay_notify() &#123; require_once("alipay/wappay/service/AlipayTradeService.php"); require_once("alipay/config.php"); $arr = $_POST; $alipaySevice = new \AlipayTradeService($config); $alipaySevice-&gt;writeLog(var_export($_POST, true)); $result = $alipaySevice-&gt;check($arr); if ($result) &#123;//验证成功 //商户订单号 $out_trade_no = $_POST['out_trade_no']; //支付宝交易号 $trade_no = $_POST['trade_no']; //交易状态 $trade_status = $_POST['trade_status']; if ($_POST['trade_status'] == 'TRADE_FINISHED') &#123; //判断该笔订单是否在商户网站中已经做过处理 //如果没有做过处理，根据订单号（out_trade_no）在商户网站的订单系统中查到该笔订单的详细，并执行商户的业务程序 //请务必判断请求时的total_amount与通知时获取的total_fee为一致的 //如果有做过处理，不执行商户的业务程序 //注意： //退款日期超过可退款期限后（如三个月可退款），支付宝系统发送该交易状态通知 &#125; else if ($_POST['trade_status'] == 'TRADE_SUCCESS') &#123; //支付成功 /** * 业务逻辑 */ echo "success"; //请不要修改或删除 &#125; else &#123; //验证失败 echo "fail"; //请不要修改或删除 &#125; &#125; &#125;]]></content>
      <tags>
        <tag>支付宝支付</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[微信支付JSAPI(PHP)]]></title>
    <url>%2F2018%2F04%2F07%2Fwechat-jsapi%2F</url>
    <content type="text"><![CDATA[公众号支付是用户在微信中打开商户的H5页面，商户在H5页面通过调用微信支付提供的JSAPI接口调起微信支付模块完成支付。适用于微信浏览器内完成微信支付。配置参考官方文档实现方法统一下单示例12345678910111213$tools = new JsApiPay();$openId = $tools-&gt;GetOpenid();//获取openid$input = new WxPayUnifiedOrder();$input-&gt;SetBody($name);//商品描述$input-&gt;SetOut_trade_no($out_trade_no);//订单号$input-&gt;SetTotal_fee($amount);//订单总金额，单位分$input-&gt;SetTime_start(date("YmdHis"));$input-&gt;SetTime_expire(date("YmdHis", time() + 600));$input-&gt;SetNotify_url("回调域名");$input-&gt;SetTrade_type("JSAPI");//交易类型$input-&gt;SetOpenid($openId);$order = WxPayApi::unifiedOrder($input);//统一下单接口$jsApiParameters = $tools-&gt;GetJsApiParameters($order); 调起微信支付示例123456789101112131415161718192021222324252627282930313233343536373839&lt;script type="text/javascript"&gt; //调用微信JS api 支付 function jsApiCall() &#123; WeixinJSBridge.invoke( 'getBrandWCPayRequest',&#123; "appId":"wx2421b1c4370ec43b", //公众号名称，由商户传入 "timeStamp":"1395712654", //时间戳，自1970年以来的秒数 "nonceStr":"e61463f8efa94090b1f366cccfbbb444", //随机串 "package":"prepay_id=u802345jgfjsdfgsdg888", "signType":"MD5", //微信签名方式： "paySign":"70EA570631E4BB79628FBCA90534C63FF7FADD89" //微信签名 &#125;, function(res)&#123; if(res.err_msg == "get_brand_wcpay_request:ok")&#123; if(res.err_msg == "get_brand_wcpay_request:ok" ) &#123;&#125; // 使用以上方式判断前端返回,微信团队郑重提示：res.err_msg将在用户支付成功后返回 ok，但并不保证它绝对可靠。 &#125; &#125; ); &#125; function callpay() &#123; if (typeof WeixinJSBridge == "undefined")&#123; if( document.addEventListener )&#123; document.addEventListener('WeixinJSBridgeReady', jsApiCall, false); &#125;else if (document.attachEvent)&#123; document.attachEvent('WeixinJSBridgeReady', jsApiCall); document.attachEvent('onWeixinJSBridgeReady', jsApiCall); &#125; &#125;else&#123; jsApiCall(); &#125; &#125; $(function()&#123; callpay(); &#125;)&lt;/script&gt; 回调处理示列1234567891011$WxPay = new \WxPayResults();header('Content-type: text/xml');$returnResult = $GLOBALS['HTTP_RAW_POST_DATA']; //接收微信发送的信息$res = $WxPay::Init($returnResult);if(res['result_code'] == 'SUCCESS')&#123;/** 业务处理*/$success = array('return_code' =&gt; 'SUCCESS', 'return_msg' =&gt; 'OK');exit(ToXml($success));//转成xml通知给微信&#125;]]></content>
      <tags>
        <tag>微信支付</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[微信支付企业付款(PHP)]]></title>
    <url>%2F2018%2F04%2F07%2Fwechat-mch-pay%2F</url>
    <content type="text"><![CDATA[企业付款为企业提供付款至用户零钱的能力，支持通过API接口付款，或通过微信支付商户平台（pay.weixin.qq.com）网页操作付款。配置和说明可以参考官方文档实现方法在微信官方SDK的WxPay.Api.php添加参考代码：企业向个人付款12345678910111213141516171819202122232425262728public function mchPay($params)&#123; $url = "https://api.mch.weixin.qq.com/mmpaymkttransfers/promotion/transfers"; //检测必填参数 if($params["partner_trade_no"] == null) &#123; throw new WxPayException("企业付款申请接口中，缺少必填参数partner_trade_no！"); &#125;else if($params["openid"] == null)&#123; throw new WxPayException("企业付款申请接口中，缺少必填参数openid！"); &#125;else if($params["check_name"] == null)&#123; throw new WxPayException("企业付款申请接口中，缺少必填参数check_name！"); &#125;else if($params["amount"] == null)&#123; throw new WxPayException("企业付款申请接口中，缺少必填参数amount！"); &#125;else if($params["desc"] == null)&#123; throw new WxPayException("企业付款申请接口中，缺少必填参数desc！"); &#125; $params["mch_appid"] = WxPayConfig::APPID();//公众账号ID $params["mchid"] = WxPayConfig::MCHID();//商户号 $params["nonce_str"] = self::getNonceStr();//随机字符串 $params['spbill_create_ip'] = $_SERVER['REMOTE_ADDR'] == '::1' ? '192.127.1.1' : $_SERVER['REMOTE_ADDR'];//获取IP $obj = new \WxPayDataBase(); $params["sign"] = $this-&gt;MakeSign($params);//签名 $xml = $this-&gt;arrayToXml($params); $response = self::postXmlCurl($xml, $url, true); $obj-&gt;FromXml($response); return $obj-&gt;GetValues();&#125; 1234567891011121314151617//array转xmlpublic function arrayToXml($arr)&#123; $xml = "&lt;xml&gt;"; foreach ($arr as $key=&gt;$val) &#123; if (is_numeric($val)) &#123; $xml.="&lt;".$key."&gt;".$val."&lt;/".$key."&gt;"; &#125; else $xml.="&lt;".$key."&gt;&lt;![CDATA[".$val."]]&gt;&lt;/".$key."&gt;"; &#125; $xml.="&lt;/xml&gt;"; return $xml;&#125; 12345678910111213141516171819202122232425262728//生成签名public function MakeSign($params)&#123; //签名步骤一：按字典序排序参数 ksort($params); $string = $this-&gt;ToUrlParams($params); //签名步骤二：在string后加入KEY $string = $string . "&amp;key=".WxPayConfig::KEY(); //签名步骤三：MD5加密 $string = md5($string); //签名步骤四：所有字符转为大写 $result = strtoupper($string); return $result;&#125;public function ToUrlParams($params)&#123; $buff = ""; foreach ($params as $k =&gt; $v) &#123; if($k != "sign" &amp;&amp; $v != "" &amp;&amp; !is_array($v))&#123; $buff .= $k . "=" . $v . "&amp;"; &#125; &#125; $buff = trim($buff, "&amp;"); return $buff;&#125; 调用示例：12345678910111213141516171819202122$mchPay = new \WxPayApi(); $amount = '付款金额';//企业付款金额，单位“分”$desc = '企业付款';//描述$partner_trade_no = '订单号';$openid = '用户oppenid';$params = array( 'partner_trade_no' =&gt; $partner_trade_no, 'openid' =&gt; $openid, 'check_name' =&gt; 'NO_CHECK',//不校验姓名 'amount' =&gt; $amount, 'desc' =&gt; $desc,);$toPay = $mchPay-&gt;mchPay($params);if($toPay["return_code"]=="SUCCESS"&amp;&amp;$toPay["result_code"]=="SUCCESS")&#123; /** * 业务逻辑 数据库操作 */ echo "付款成功"; &#125;else&#123; //输出错误信息 echo $toPay['err_code'].$toPay['err_code_des'];&#125;]]></content>
      <tags>
        <tag>微信支付</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[支付宝APP支付服务端接入(PHP)]]></title>
    <url>%2F2018%2F04%2F07%2Falipay%2F</url>
    <content type="text"><![CDATA[第一步：创建应用并获取APPID要在您的应用中接入支付宝App支付能力，需要通过创建应用的方式接入蚂蚁相关接口并进行开发，在创建应用后即生成应用的标识APPID，使用支付宝账号登录开放平台后，在“我的应用”中查看APPID。第二步：配置应用添加app支付功能——&gt;签约——&gt;配置密钥第三步：集成和开发集成服务端SDK获取PHP版资源SDK要注意开发环境最好达到官方建议的环境要求，否则集成过程中要对SDK作调整来适配环境。PHP服务端SDK生成APP支付订单信息示例123456789101112131415161718192021222324$aop = new AopClient;$aop-&gt;gatewayUrl = "https://openapi.alipay.com/gateway.do";$aop-&gt;appId = "app_id";$aop-&gt;rsaPrivateKey = '请填写开发者私钥去头去尾去回车，一行字符串';$aop-&gt;format = "json";$aop-&gt;charset = "UTF-8";$aop-&gt;signType = "RSA2";$aop-&gt;alipayrsaPublicKey = '请填写支付宝公钥，一行字符串';//实例化具体API对应的request类,类名称和接口名称对应,当前调用接口名称：alipay.trade.app.pay$request = new AlipayTradeAppPayRequest();//SDK已经封装掉了公共参数，这里只需要传入业务参数$bizcontent = "&#123;\"body\":\"我是测试数据\"," . "\"subject\": \"App支付测试\"," . "\"out_trade_no\": \"20170125test01\"," . "\"timeout_express\": \"30m\"," . "\"total_amount\": \"0.01\"," . "\"product_code\":\"QUICK_MSECURITY_PAY\"" . "&#125;";$request-&gt;setNotifyUrl("商户外网可以访问的异步地址");$request-&gt;setBizContent($bizcontent);//这里和普通的接口调用不同，使用的是sdkExecute$response = $aop-&gt;sdkExecute($request);//htmlspecialchars是为了输出到页面时防止被浏览器将关键参数html转义，实际打印到日志以及http传输不会有这个问题echo htmlspecialchars($response);//就是orderString 可以直接给客户端请求，无需再做处理。 PHP服务端验证异步通知信息参数示例123$aop = new AopClient;$aop-&gt;alipayrsaPublicKey = '请填写支付宝公钥，一行字符串';$flag = $aop-&gt;rsaCheckV1($_POST, NULL, "RSA2");]]></content>
      <tags>
        <tag>支付宝支付</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[微信APP支付服务端接入(PHP)]]></title>
    <url>%2F2018%2F04%2F07%2Fwechat%2F</url>
    <content type="text"><![CDATA[第一步：申请微信APP支付微信开放平台是商户APP接入微信支付开放接口的申请入口，通过此平台可申请微信APP支付。第二步：配置商户支付密钥微信商户平台是微信支付相关的商户功能集合，登录微信商户平台后按以下步骤操作：1.点击帐户中心——操作证书——安装安全控件——安装操作证书（要验证手机号码）2.点击帐户中心——API安全——设置API密钥——确认——新密钥——手机验证码——登录密码第三步：集成和开发集成服务端SDK微信APP支付统一下单示例123456789$input = new WxPayUnifiedOrder();$input-&gt;SetBody("test"); //商品描述$input-&gt;SetOut_trade_no("商户订单号");$input-&gt;SetTotal_fee("1"); //订单总金额，注意单位为分$input-&gt;SetTime_start(date("YmdHis"));$input-&gt;SetTime_expire(date("YmdHis", time() + 600));$input-&gt;SetNotify_url("商户外网可以访问的异步地址");$input-&gt;SetTrade_type("APP");$order = WxPayApi::unifiedOrder($input); //调用统一下单接口 调起支付商户服务器生成支付订单，先调用【统一下单API】生成预付单，获取到prepay_id后将参数再次签名传输给APP发起支付。以下是调起微信支付的关键代码：1$order_data = $WxPayApi-&gt;GetAppParameters($order); //调起支付所需的请求参数 GetAppParameters()是外加的代码，微信SDK中没有这个方法，下面是在微信SDK中代码APP支付补充部分。在WxPay.Api.php中补充代码：123456789101112131415161718192021222324252627282930/** * * 获取App支付的参数 * @param array $UnifiedOrderResult 统一支付接口返回的数据 * @throws WxPayException * * @return $parameters */public function GetAppParameters($UnifiedOrderResult)&#123; if(!array_key_exists("appid", $UnifiedOrderResult) || !array_key_exists("prepay_id", $UnifiedOrderResult) || $UnifiedOrderResult['prepay_id'] == "" || !array_key_exists("mch_id", $UnifiedOrderResult) || $UnifiedOrderResult['mch_id'] == "") &#123; throw new WxPayException("参数错误"); &#125; $app = new WxPayAppPay(); $app-&gt;SetAppid($UnifiedOrderResult["appid"]); $app-&gt;SetPrepayId($UnifiedOrderResult["prepay_id"]); $app-&gt;SetPartnerId($UnifiedOrderResult['mch_id']); $timeStamp = time(); $app-&gt;SetTimeStamp("$timeStamp"); $app-&gt;SetNonceStr(WxPayApi::getNonceStr()); $app-&gt;SetPackage("Sign=WXPay"); $app-&gt;SetPaySign($app-&gt;MakeSign()); $parameters = $app-&gt;GetValues(); return $parameters;&#125; 在WxPay.Data.php中补充代码：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869/** * * 提交App输入对象 * @author lin * */class WxPayAppPay extends WxPayDataBase&#123; /** * 设置微信分配的公众账号ID * @param string $value **/ public function SetAppid($value) &#123; $this-&gt;values['appid'] = $value; &#125; /** * 设置预支付交易会话ID * @param string $value **/ public function SetPrepayId($value) &#123; $this-&gt;values['prepayid'] = $value; &#125; /** * 设置商户号ID * @param string $value **/ public function SetPartnerId($value) &#123; $this-&gt;values['partnerid'] = $value; &#125; /** * 设置支付时间戳 * @param string $value **/ public function SetTimeStamp($value) &#123; $this-&gt;values['timestamp'] = $value; &#125; /** * 随机字符串 * @param string $value **/ public function SetNonceStr($value) &#123; $this-&gt;values['noncestr'] = $value;&#125; /** * 设置订单详情扩展字符串 * @param string $value **/ public function SetPackage($value) &#123; $this-&gt;values['package'] = $value; &#125; /** * 设置签名方式 * @param string $value **/ public function SetPaySign($value) &#123; $this-&gt;values['sign'] = $value; &#125;&#125; 回调处理的示列1234567891011$WxPay = new \WxPayResults();header('Content-type: text/xml');$returnResult = $GLOBALS['HTTP_RAW_POST_DATA']; //接收微信发送的信息$res = $WxPay::Init($returnResult);if(res['result_code'] == 'SUCCESS')&#123;/** 业务处理*/$success = "&lt;xml&gt;&lt;return_code&gt;&lt;![CDATA[SUCCESS]]&gt;&lt;/return_code&gt;&lt;return_msg&gt;&lt;![CDATA[OK]]&gt;&lt;/return_msg&gt;&lt;/xml&gt;";exit($success);//回调结果通知&#125;]]></content>
      <tags>
        <tag>微信支付</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Vue+tp5简单列表操作]]></title>
    <url>%2F2018%2F03%2F06%2Fvtpro%2F</url>
    <content type="text"><![CDATA[前段时间，初次使用前端框架Vue和ThinkPHP5.1，于是就简单结合起来，用Vue+axios发送请求，TP5处理接口数据。这里Vue、axios和TP5等等的安装就不多说了，按照官方文档来就ok了。Vue部分，在main.js中引入axios,qs来帮助处理数据，接口请求的时候会遇到跨域问题1234567891011121314import axios from 'axios'import Qs from 'qs'Vue.prototype.$axios = axios;Vue.config.productionTip = falsevar axios_instance = axios.create(&#123;transformRequest: [function (data) &#123;data = Qs.stringify(data);return data;&#125;],//Post请求传递参数时，需要在请求头加上item.ContentType = "application/x-www-form-urlencoded";headers:&#123;'Content-Type':'application/x-www-form-urlencoded'&#125;&#125;)Vue.prototype.$axios = axios_instance; PHP部分后端响应头进行设置123456// 指定允许其他域名访问header("Access-Control-Allow-Origin:*");// 响应类型header("Access-Control-Allow-Methods:GET, POST, PATCH, PUT, DELETE");// 响应头设置header("Access-Control-Allow-Headers:x-requested-with,content-type"); 解决了跨域问题后，接下来就能通过接口请求和数据处理了。 在Vue的/config/dev.env.js 设置 API_HOST12345678'use strict'const merge = require('webpack-merge')const prodEnv = require('./prod.env')module.exports = merge(prodEnv, &#123;NODE_ENV: '"development"',API_HOST:'"http://127.0.0.1/tp5/"'&#125;) 下面是一个简单的列表，包含简单的增删改查，查看单条数据等功能列表部分代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212&lt;template&gt; &lt;div class="list-table"&gt; &lt;h1&gt;TODO-LIST&lt;/h1&gt; &lt;form&gt; 姓名：&lt;input type="text" v-model="nickname"/&gt; &#123;&#123;nickname&#125;&#125; &lt;br/&gt; 年龄：&lt;input type="text" v-model="age"/&gt; &#123;&#123;age&#125;&#125; &lt;br/&gt; &lt;span style="color:red" v-if="!isAge"&gt;年龄必须是数字&lt;/span&gt; &lt;br/&gt; &lt;br/&gt; &lt;button type="button" @click="addList"&gt;添加&lt;/button&gt; &lt;button type="button" @click="init()"&gt;重置&lt;/button&gt; &lt;/form&gt; &lt;br/&gt; &lt;table border="1" cellspacing="0"&gt; &lt;thead&gt; &lt;th&gt;序号&lt;/th&gt; &lt;th&gt;姓名&lt;/th&gt; &lt;th&gt;年龄&lt;/th&gt; &lt;th&gt;操作&lt;/th&gt; &lt;/thead&gt; &lt;tr v-for="(data,index) in list"&gt; &lt;td&gt;&#123;&#123;index+1&#125;&#125;&lt;/td&gt; &lt;td&gt;&#123;&#123;data.nickname&#125;&#125;&lt;/td&gt; &lt;td&gt;&#123;&#123;data.age&#125;&#125;&lt;/td&gt; &lt;td&gt; &lt;button @click="detail(index)"&gt;查看详情&lt;/button&gt; &lt;button @click="delList(index)"&gt;删除&lt;/button&gt; &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td colspan="2" style="text-align: center"&gt;总年龄：&lt;/td&gt; &lt;td&gt;&#123;&#123;sumAge&#125;&#125;&lt;/td&gt; &lt;td&gt;&lt;button @click="controlList"&gt;清空/还原&lt;/button&gt;&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; &lt;/div&gt;&lt;/template&gt;&lt;script&gt;export default &#123; name:"TODOList" data () &#123; return &#123; //姓名 nickname:"", //年龄 age:"", //age是数字 isAge:true, list: [], &#125; &#125;, created()&#123; this.getList() &#125;, methods:&#123; /** * 获取列表数据 */ getList: function () &#123; let $this = this; this.$axios.get(process.env.API_HOST) .then(function(response)&#123; $this.list = response.data; console.log(response.data); &#125;) .catch(function (error) &#123; console.log(error); &#125;); &#125;, /** * 新增列表数据 */ addList:function()&#123; let $this = this; if(!this.isAge)&#123; return false; &#125; if($this.nickname &amp;&amp; $this.age)&#123; $this.$axios.get(process.env.API_HOST + 'index/index/addList',&#123; params: &#123; nickname: $this.nickname, age: $this.age &#125; &#125;).then(function (response) &#123; console.log(response.data); $this.list.push(&#123; nickname:response.data.nickname, age:response.data.age &#125;); &#125;).catch(function (error) &#123; console.log(error); &#125;); &#125; &#125;, /** * 删除列表数据 * @param index list键值 */ delList:function(index)&#123; let $this = this; if(confirm('确定要删除吗'))&#123; if($this.list[index] != undefined)&#123; $this.$axios.post(process.env.API_HOST + 'index/index/delList',&#123; nickname: $this.list[index].nickname &#125;).then(function (response) &#123; if(response.data=='操作成功')&#123; $this.list.splice(index,1); &#125; &#125;).catch(function (error) &#123; console.log(error); &#125;); &#125; &#125; &#125;, /** * 清空或还原列表数据 */ controlList:function()&#123; if(confirm('确定要执行此操作吗'))&#123; this.$axios.post(process.env.API_HOST + 'index/index/controlList').then(response=&gt;&#123; if(response.data=='')&#123; this.list.splice(0,this.list.length); &#125;else&#123; for (var i in response.data) &#123; this.list.push(&#123; nickname:response.data[i].nickname, age:response.data[i].age &#125;); &#125; &#125; &#125;).catch(function (error) &#123; console.log(error); &#125;);; &#125; &#125;, detail:function(index)&#123; this.$router.push(&#123;path:'/detail',query: &#123;nickname: this.list[index].nickname&#125;&#125;) &#125;, /** * 初始化输入 */ init:function()&#123; this.nickname = ""; this.age = ""; this.isAge = true; &#125;, /** * 检测数字 * @param theObj 要检测的字符串 * @returns &#123;boolean&#125; 是数字放回true 不是返回false */ checkNumber:function(theObj) &#123; var reg = /^[0-9]+$/; if(reg.test(theObj))&#123; return true; &#125;; return false; &#125; &#125;, computed:&#123; sumAge:function()&#123; var ages = 0; for (var i in this.list) &#123; ages += Number(this.list[i].age); &#125; return ages; &#125; &#125;, watch:&#123; age:&#123; /** * 监听age的变化 * @param newValue * @param oldValue * @returns &#123;boolean&#125; */ handler(newValue, oldValue)&#123; if(newValue == "")&#123; this.isAge = true; return true; &#125; var res = this.checkNumber(newValue); if(res)&#123; this.isAge = true; &#125;else&#123; this.isAge = false; &#125; &#125; &#125; &#125;&#125;&lt;/script&gt;&lt;style&gt; .list-table&#123; width: 100%; &#125; .list-table table&#123; margin: 0 auto; width: 500px; &#125; .list-table table th&#123; font-size: 28px; &#125; .list-table table td&#123; padding: 5px 0; font-size: 20px; &#125;&lt;/style&gt; 详情部分代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130&lt;template&gt;&lt;div class="list-table"&gt; &lt;h1&gt;&#123;&#123;msg&#125;&#125;&lt;/h1&gt; &lt;table border="1" cellspacing="0"&gt; &lt;thead&gt; &lt;th&gt;用户UID&lt;/th&gt; &lt;th&gt;姓名&lt;/th&gt; &lt;th&gt;年龄&lt;/th&gt; &lt;/thead&gt; &lt;tr&gt; &lt;td&gt;&#123;&#123;uid&#125;&#125;&lt;/td&gt; &lt;td&gt;&#123;&#123;nickname&#125;&#125;&lt;/td&gt; &lt;td&gt;&#123;&#123;age&#125;&#125;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td colspan="2"&gt;信息介绍&lt;/td&gt; &lt;td&gt; &lt;button type="button" @click="OpenModal"&gt;添加/编辑信息&lt;/button&gt; &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td colspan="3" v-if="info"&gt;&#123;&#123;info&#125;&#125;&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; &lt;router-link to="/list"&gt;返回&lt;/router-link&gt; &lt;div class="open-box" v-if="OpenShow"&gt; &lt;div class="open-box-content"&gt; &lt;h3&gt;编辑信息&lt;/h3&gt; &lt;p&gt;请输入您的个人信息&lt;/p&gt; &lt;textarea v-model="info"&gt;&#123;&#123;info&#125;&#125;&lt;/textarea&gt; &lt;div class="open-box-btn"&gt; &lt;div class="open-box-btn-left"&gt; &lt;button @click="addinfo"&gt;保存&lt;/button&gt; &lt;/div&gt; &lt;div class="open-box-btn-right"&gt; &lt;button @click="ColseModal"&gt;关闭&lt;/button&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;/template&gt;&lt;script&gt;export default &#123; name: 'Detail', data () &#123; return &#123; msg: '信息详情', uid:'', //姓名 nickname:"", //年龄 age:"", OpenShow: false, info:'' &#125; &#125;, created()&#123; this.getinfo() &#125;, methods:&#123; /** * 获取信息 */ getinfo: function () &#123; let $this = this; this.$axios.get(process.env.API_HOST+'index/index/getInfo',&#123; params:&#123;nickname:this.$route.query.nickname&#125; &#125;) .then(function(response)&#123; $this.nickname = response.data.nickname $this.age = response.data.age $this.uid = response.data.uid $this.info = response.data.info console.log(response.data); &#125;) .catch(function (error) &#123; console.log(error); &#125;); &#125;, /** * 编辑信息 */ addinfo: function()&#123; this.$axios.post(process.env.API_HOST+'index/index/addInfo',&#123; info:this.info, uid:this.uid &#125;) .then(response=&gt;&#123; alert(response.data) this.OpenShow = !this.OpenShow &#125;) .catch(function(error)&#123; console.log(error); &#125;); &#125;, OpenModal() &#123; this.OpenShow = !this.OpenShow &#125;, ColseModal() &#123; this.OpenShow = !this.OpenShow &#125; &#125;&#125;&lt;/script&gt;&lt;style&gt;.list-table&#123;width: 100%;&#125;.list-table table&#123;margin: 0 auto;.../*样式部分省略*//*弹窗样式*/.open-box &#123;position: fixed;background: rgba(0, 0, 0, 0.4);width: 100%;height: 100%;left: 0;top: 0;z-index: 100;color: #fff;.../*样式部分省略*/&lt;/style&gt; TP5中相应的代码做数据库处理12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970/*** 获取列表数据*/public function index()&#123; $res = model('Member')-&gt;getUserList(); return $res;&#125;/*** 新增列表数据*/public function addList()&#123; $nickname=Input('nickname'); $age=Input('age',0,'floatval'); $res = model('Member')-&gt;save([ 'nickname'=&gt;$nickname, 'age'=&gt;$age, 'status'=&gt;1 ]); if($res)&#123; $data=['nickname'=&gt;$nickname,'age'=&gt;$age]; $data = json_encode($data); return $data; &#125;&#125;/*** 删除列表数据*/public function delList()&#123; $nickname=Input('nickname'); model('Member')-&gt;save(['status'=&gt;-1],['nickname'=&gt;$nickname]); return '操作成功';&#125;/*** 清空还原列表数据*/public function controlList()&#123; if(!model('Member')-&gt;where(['status'=&gt;1])-&gt;count())&#123; model('Member')-&gt;save(['status'=&gt;1],['status'=&gt;-1]); $res = model('Member')-&gt;getUserList(); return $res; &#125;else&#123; model('Member')-&gt;save(['status'=&gt;-1],['status'=&gt;1]); return ''; &#125;&#125;/*** 获取信息*/public function getInfo()&#123; $nickname=Input('nickname'); $info = model('Member')-&gt;where(['nickname'=&gt;$nickname])-&gt;find(); return $info;&#125;/*** 编辑信息*/public function addInfo()&#123; $info = Input('info'); $uid = Input('uid'); $res = model('Member')-&gt;save(['info'=&gt;$info],['uid'=&gt;$uid]); if($res)&#123; return '编辑成功'; &#125;&#125; 数据表结构123456789101112---- 表的结构 `list_member`--CREATE TABLE IF NOT EXISTS `list_member` ( `uid` int(11) NOT NULL AUTO_INCREMENT, `nickname` varchar(10) NOT NULL, `age` int(11) NOT NULL, `status` tinyint(4) NOT NULL, `info` varchar(200) NOT NULL, PRIMARY KEY (`uid`)) ENGINE=MyISAM DEFAULT CHARSET=utf8 AUTO_INCREMENT=1 ;]]></content>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[shadowsocks]]></title>
    <url>%2F2018%2F02%2F28%2Fshadowsocks%2F</url>
    <content type="text"><![CDATA[VPS服务器超简单搭建shadowsocks 方法vultr服务器购买：https://www.vultr.com/安装Xshell，安装完成后新建会话（Alt+N），协议选择SSH，主机填写之前的IP Address，端口号选择22。VPS可以先升级1yum -y update 有些VPS 没有wget这种要先装1yum -y install wget 输入以下命令：1231.wget --no-check-certificate https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocks.sh2.chmod +x shadowsocks.sh3../shadowsocks.sh 2&gt;&amp;1 | tee shadowsocks.log 第一行是下载命令，下载东西，第二行是修改权限，第三行是安装命令1234配置：密码：（默认是teddysun.com）端口：默认是8989然后按任意键安装，退出按 Ctrl+c 安装完成会有一个配置1Congratulations, shadowsocks install completed!Your Server IP: ***** VPS的IP地址Your Server Port: ***** 你刚才设置的端口Your Password: **** 你刚才设置的密码Your Local IP: 127.0.0.1 Your Local Port: 1080 Your Encryption Method: aes-256-cfb Welcome to visit:https://teddysun.com/342.htmlEnjoy it! 然后就可以用这些东西 VPS主机一键安装Google TCP BBR加速因为VPS架构系统的不同，我们很多软件的安装、部署也是具有局限性的。比如搬瓦工以前都是OpenVZ架构，是不可以安装类似锐速、Google TCP BBR来给服务器加速的。在上周的时候，我们都有看到新增KVM架构方案，虽然还处于测试就阶段，但是也是可以购买的，数据中心在洛杉矶QN，最为主要的是KVM架构，我们可以安装Google TCP BBR工具。 在这篇文章中，将利用teddysun分享的一键Google TCP BBR安装工具脚本（https://teddysun.com/489.html）来部署到搬瓦工KVM VPS中，看看速度是否提高。这样我们用来建站或者其他用途的速度应该还是可以提升的。 第一、系统支持我们系统需要是CentOS 6+，Debian 7+，Ubuntu 12+，除了OpenVZ架构之外都支持，比如常规的KVM和XEN。 第二、一键脚本安装123wget --no-check-certificate https://github.com/teddysun/across/raw/master/bbr.shchmod +x bbr.sh./bbr.sh 自动安装，然后最后提示我们需要重启生效。 第三、检查BBR启动1、检查核心1uname -r 检查内核是不是4.10，检测后看到的是”4.10.5-1.el6.elrepo.x86_64”。 2、执行后返回“net.ipv4.tcp_available_congestion_control = bbr cubic reno”1sysctl net.ipv4.tcp_available_congestion_control 3、执行后返回“net.ipv4.tcp_congestion_control = bbr”1sysctl net.ipv4.tcp_congestion_control 4、查看返回值”net.core.default_qdisc = fq”1sysctl net.core.default_qdisc 5、看到有BBR信息。说明安装成功了。1lsmod | grep bbr 这样，在安装完毕BBR之后，我们去建站等用途的时候，应该是速度有提高的。 shadowsocks下载Android Google Play:http://ossfiles.fyvps.com/ssclient/shadowsocks-nightly-4.2.5.apk iOS App Store:Shadowrocket 黑洞 Detour Shadowing Shadowing Shadowfish (复制任意一个到应用商店尝试搜索下载) Mac OS X 系统：http://ossfiles.fyvps.com/ssclient/ShadowsocksX-NG-1.4.zip For Windows:http://ossfiles.fyvps.com/ssclient/Shadowsocks-4.0.6.zip Linux 客户端 ,shadowsocks-qt5 版本:https://github.com/shadowsocks/shadowsocks-qt5/wiki 备用方式脚本功能 自定义端口号和密码 全过程静默安装，不会打扰用户，你所要做的就是去听一首音乐或者去喝杯咖啡 一次只允许运行一个shadowsocks进程，脚本会自动检测原来已经运行的进程并杀死 安装防火墙并开放需要的端口 操作步骤下载脚本1wget -O ss.sh http://45.32.195.77/file/ss.sh 执行脚本1bash ss.sh 设置端口号并回车，直接回车是设置为12251Please enter PORT(1225 default): 设置密码并回车，直接回车是设置为1234561Please enter PASSWORD(123456 default): 等待一会……就完成了（初次执行约2-5min）]]></content>
      <tags>
        <tag>shadowsocks</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CentOS7]]></title>
    <url>%2F2018%2F02%2F27%2Fcentos%2F</url>
    <content type="text"><![CDATA[CentOS 7 安装配置LAMP服务器方法(Apache+PHP+MariaDB)摘要: CentOS 7 安装配置LAMP服务器方法(Apache+PHP+MariaDB)，CentOS 7后Mysql改为MariaDB准备篇： 一、配置防火墙，开启80端口、3306端口 CentOS 7 默认使用的是firewall作为防火墙，这里改为iptables防火墙。 1、关闭firewall：12systemctl stop firewalld.service #停止firewall systemctl disable firewalld.service #禁止firewall开机启动 2、安装iptables防火墙 12yum install iptables-services #安装 vi /etc/sysconfig/iptables #编辑防火墙配置文件 12345678910111213141516# Firewall configuration written by system-config-firewall # Manual customization of this file is not recommended. *filter :INPUT ACCEPT [0:0] :FORWARD ACCEPT [0:0] :OUTPUT ACCEPT [0:0] -A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT -A INPUT -p icmp -j ACCEPT -A INPUT -i lo -j ACCEPT -A INPUT -m state --state NEW -m tcp -p tcp --dport 22 -j ACCEPT -A INPUT -m state --state NEW -m tcp -p tcp --dport 80 -j ACCEPT -A INPUT -m state --state NEW -m tcp -p tcp --dport 3306 -j ACCEPT -A INPUT -j REJECT --reject-with icmp-host-prohibited -A FORWARD -j REJECT --reject-with icmp-host-prohibited COMMIT :wq! #保存退出 12systemctl restart iptables.service #最后重启防火墙使配置生效 systemctl enable iptables.service #设置防火墙开机启动 二、关闭SELINUX123456vi /etc/selinux/config#SELINUX=enforcing #注释掉#SELINUXTYPE=targeted #注释掉SELINUX=disabled #增加:wq! #保存退出setenforce 0 #使配置立即生效 安装篇： 一、安装Apache12345yum install httpd #根据提示，输入Y安装即可成功安装systemctl start httpd.service #启动apachesystemctl stop httpd.service #停止apachesystemctl restart httpd.service #重启apachesystemctl enable httpd.service #设置apache开机启动 二、安装MariaDB CentOS 7 中，已经使用MariaDB替代了MySQL数据库 1、安装MariaDB123456yum install mariadb mariadb-server #询问是否要安装，输入Y即可自动安装,直到安装完成systemctl start mariadb.service #启动MariaDBsystemctl stop mariadb.service #停止MariaDBsystemctl restart mariadb.service #重启MariaDBsystemctl enable mariadb.service #设置开机启动cp /usr/share/mysql/my-huge.cnf /etc/my.cnf #拷贝配置文件（注意：如果/etc目录下面默认有一个my.cnf，直接覆盖即可） 2、为root账户设置密码1mysql_secure_installation 回车，根据提示输入Y 输入2次密码，回车 根据提示一路输入Y 最后出现：Thanks for using MySQL! MySql密码设置完成，重新启动 MySQL：1systemctl restart mariadb.service #重启MariaDB 三、安装PHP 1、安装PHP 和 php-devel工具 方便日后使用 phpize 做扩展编译1yum install php php-devel #根据提示输入Y直到安装完成 2、安装PHP组件，使PHP支持 MariaDB1yum install php-mysql php-gd libjpeg* php-ldap php-odbc php-pear php-xml php-xmlrpc php-mbstring php-bcmath php-mhash 这里选择以上安装包进行安装，根据提示输入Y回车123systemctl restart mariadb.service #重启MariaDBsystemctl restart httpd.service #重启apache 注意：apache默认的程序目录是/var/www/html 权限设置：1chown -R apache:apache /var/www/html 至此，CentOS 7.0安装配置LAMP服务器(Apache+PHP+MariaDB)教程完成！原文链接：https://my.oschina.net/sallency/blog/467647]]></content>
      <tags>
        <tag>CentOS</tag>
      </tags>
  </entry>
</search>
