<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>TomLinl&#39;s Blog</title>
  
  <subtitle>o(*￣▽￣*)ブ</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-06-09T08:50:13.016Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>TomLinl</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>MySQL索引</title>
    <link href="http://yoursite.com/2018/11/14/mysql/"/>
    <id>http://yoursite.com/2018/11/14/mysql/</id>
    <published>2018-11-14T03:10:56.000Z</published>
    <updated>2019-06-09T08:50:13.016Z</updated>
    
    <content type="html"><![CDATA[<h3 id="MySQL索引对性能的影响"><a href="#MySQL索引对性能的影响" class="headerlink" title="MySQL索引对性能的影响"></a>MySQL索引对性能的影响</h3><blockquote><p>1.大大减少服务器需要扫描的数据量<br>2.帮助服务器避免排序和临时表<br>3.将随机的I/O变为顺序的I/O<br>4.提高查询速度，降低写的速度、占用磁盘</p></blockquote><h3 id="MySQL索引的使用场景"><a href="#MySQL索引的使用场景" class="headerlink" title="MySQL索引的使用场景"></a>MySQL索引的使用场景</h3><blockquote><p>1.对于非常小的表，大部分情况下全表扫描效率更高<br>2.中到大型表，索引非常有效<br>3.特大型表，建立和使用索引的代价将随之增长，可以使用分区技术解决</p></blockquote><h3 id="MySQL索引的类型"><a href="#MySQL索引的类型" class="headerlink" title="MySQL索引的类型"></a>MySQL索引的类型</h3><blockquote><p>索引有很多种类型，都是实现在存储引擎层的:<br>1.普通索引：最基本的索引，没有任何约束限制<br>2.唯一索引：与普通索引类似，但具有唯一约束性<br>3.主键索引：特殊的唯一索引，不允许有空值<br>4.组合索引：将多个列组合在一起创建索引，可以覆盖多个列<br>5.外键索引：只有InnoDB使用，保证数据的一致性完整性和实现级联操作<br>6.全文索引：只有MyISAM使用，只能对英文进行全文检索<br>注意：一个表只有一个主键索引，可以有多个唯一索引<br>主键索引一定是唯一索引，唯一索引不是主键索引<br>主键可以与外键构成参照完整性约束，防止数据不一致</p></blockquote><h3 id="MySQL索引的创建原则"><a href="#MySQL索引的创建原则" class="headerlink" title="MySQL索引的创建原则"></a>MySQL索引的创建原则</h3><blockquote><p>1.最适合索引的列是出现在WHERE子句中的列，或连接子句中的列而不是SELECT<br>关键字后的列<br>2.索引列的基数越大，索引的效果越好<br>3.对字符串进行索引，应该指定一个前缀长度，可以节省大量的索引空间<br>4.根据情况创建复合索引，复合索引可以提高查询效率<br>5.避免创建过多的索引，索引会占用额外的磁盘空间，降低写操作效率<br>6.主键尽可能选择较短的数据类型，可以有效减少索引的磁盘占用提高查询效率</p></blockquote><h3 id="MySQL索引的注意事项"><a href="#MySQL索引的注意事项" class="headerlink" title="MySQL索引的注意事项"></a>MySQL索引的注意事项</h3><blockquote><p>1.复合索引遵循前缀原则<br>2.like查询，%不能在前，可以使用全文索引<br>3.column is null 可以使用索引<br>4.如果mysql估计使用索引比全表扫描慢会放弃使用索引<br>5.如果or前的条件中的列有索引，后面的没有，索引都不会被用到<br>6.列类型是字符串，查询时一定要给值加引号，否则索引失效</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;MySQL索引对性能的影响&quot;&gt;&lt;a href=&quot;#MySQL索引对性能的影响&quot; class=&quot;headerlink&quot; title=&quot;MySQL索引对性能的影响&quot;&gt;&lt;/a&gt;MySQL索引对性能的影响&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;1.大大减少服务器需要扫描
      
    
    </summary>
    
    
      <category term="MySQL" scheme="http://yoursite.com/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>百度统计API</title>
    <link href="http://yoursite.com/2018/06/22/bdtj/"/>
    <id>http://yoursite.com/2018/06/22/bdtj/</id>
    <published>2018-06-22T12:24:36.000Z</published>
    <updated>2019-06-09T08:50:13.016Z</updated>
    
    <content type="html"><![CDATA[<p>百度统计开放平台是百度统计全新推出的，业务数据收集（获取网站的PV UV 等数据）、导出以及应用为一体的开放体系，由JS API和tongji API两部分组成。<br><a id="more"></a></p><p>一、JS API通过在页面上部署js代码的方式，收集网站的各类业务数据。</p><p>在部署百度统计开放平台JS API之前，先注册一个百度统计账号，并安装了百度统计的访问分析代码。</p><p>二、Tongji API支持将百度统计中的数据以通用格式导出，帮助您将报表中的数据导出至自身系统中，以便更加灵活地展现、分析、挖掘百度统计中的数据价值。</p><p>登录百度统计，在后台的管理—其它设置——数据导出服务，开通服务。</p><p>为了我们自己的网站后台看到数据，我们在自己的网站集成Tongji API</p><p>下载Tongji API Demo</p><p>Config.inc.php 配置用户名密码TOKEN等信息</p><pre><code class="php">&lt;?php...//USERNAMEdefine(&#39;USERNAME&#39;, &#39;YOUR USERNAME&#39;);//PASSWORDdefine(&#39;PASSWORD&#39;, &#39;YOUR PASSWORD&#39;);//TOKENdefine(&#39;TOKEN&#39;, &#39;YOUR TOKEN&#39;);...</code></pre><p>demo.php</p><pre><code class="php">//头部添加：header(‘Content-type:text/json’);&#39;&#39;&#39;//尾部添加：$res = json_decode($ret[&#39;raw&#39;], true);print_r($res);</code></pre><p>打印结果如下：</p><pre><code>Array([header] =&gt; Array    (        [desc] =&gt; success        [failures] =&gt; Array            (            )        [oprs] =&gt; 1        [succ] =&gt; 1        [oprtime] =&gt; 0        [quota] =&gt; 1        [rquota] =&gt; 49974        [status] =&gt; 0    )[body] =&gt; Array    (        [data] =&gt; Array            (                [0] =&gt; Array                    (                        [result] =&gt; Array                            (                                [total] =&gt; 1                                [items] =&gt; Array                                    (                                        [0] =&gt; Array                                            (                                                [0] =&gt; Array                                                    (                                                        [0] =&gt; 2018/06/22                                                    )                                            )                                        [1] =&gt; Array                                            (                                                [0] =&gt; Array                                                    (                                                        [0] =&gt; 11201                                                        [1] =&gt; 745                                                        [2] =&gt; 46.15                                                        [3] =&gt; 426                                                        [4] =&gt; 12.34                                                    )                                            )                                        .                                        .                                    )                                [timeSpan] =&gt; Array                                    (                                        [0] =&gt; 2018/06/22                                    )                                [sum] =&gt; Array                                    (                                        [0] =&gt; Array                                            (                                                [0] =&gt; 11201                                                [1] =&gt; 745                                                [2] =&gt; 46.15                                                [3] =&gt; 426                                                [4] =&gt; 12.34                                            )                                        .                                    )                                [offset] =&gt; 0                                [pageSum] =&gt; Array                                    (                                        [0] =&gt; Array                                            (                                                [0] =&gt; 11201                                                [1] =&gt; 745                                                [2] =&gt; 46.15                                                [3] =&gt; 426                                                [4] =&gt; 12.34                                            )                                      .                                      .                                    )                                [fields] =&gt; Array                                    (                                        [0] =&gt; simple_date_title                                        [1] =&gt; pv_count                                        [2] =&gt; visitor_count                                        [3] =&gt; bounce_ratio                                        [4] =&gt; avg_visit_time                                        [5] =&gt; avg_visit_pages                                    )                            )                    )            )    ))</code></pre><p>下面新建GetData.php写一个方法获取数据并处理,数据比较乱，处理成以fields为键名对应相应的值的键值对形式便于处理</p><pre><code class="php">&lt;?phpfunction getBdData($start_date, $end_date, $gran = &#39;&#39;, $metrics = &#39;pv_count,visitor_count&#39;,$clientDevice = &#39;&#39;, $method = &#39;trend/time/a&#39;, $max_results = &#39;0&#39;){    require_once(&#39;Config.inc.php&#39;);    require_once(&#39;LoginService.inc.php&#39;);    require_once(&#39;ReportService.inc.php&#39;);    header(&#39;Content-type:text/json&#39;);    $loginService = new LoginService(LOGIN_URL, UUID);// preLogin    if (!$loginService-&gt;preLogin(USERNAME, TOKEN)) {        exit();    }// doLogin    $ret = $loginService-&gt;doLogin(USERNAME, PASSWORD, TOKEN);    if ($ret) {        $ucid = $ret[&#39;ucid&#39;];        $st = $ret[&#39;st&#39;];    } else {        exit();    }    $reportService = new ReportService(API_URL, USERNAME, TOKEN, $ucid, $st);    $siteId = &#39;your siteId&#39;;    $ret = $reportService-&gt;getData(array(        &#39;site_id&#39; =&gt; $siteId,                   //站点ID        &#39;method&#39; =&gt; $method,             //通常对应要查询的报告        &#39;start_date&#39; =&gt; $start_date,             //所查询数据的起始日期        &#39;end_date&#39; =&gt; $end_date,               //所查询数据的结束日期        &#39;metrics&#39; =&gt; $metrics,  //自定义指标选择，多个指标用逗号分隔        &#39;max_results&#39; =&gt; $max_results,                     //返回所有条数        &#39;gran&#39; =&gt; $gran,                        //时间粒度(只支持有该参数的报告): day/hour/week/month    ));   //将获取的数据进行处理    $res = json_decode($ret[&#39;raw&#39;], true);    $res = $res[&quot;body&quot;][&quot;data&quot;][&#39;0&#39;][&quot;result&quot;];    array_shift($res[&quot;fields&quot;]);    $fields = $res[&quot;fields&quot;];    foreach ($res[&quot;items&quot;][1] as $key =&gt; &amp;$val) {        $val = array_combine($fields, $val);        $time = $res[&quot;items&quot;][0][$key][0];        $val[&#39;time&#39;] = $time;    }    unset($val);// doLogout    $loginService-&gt;doLogout(USERNAME, TOKEN, $ucid, $st);    return $res[&quot;items&quot;][1];}</code></pre><p>结果如下:[items][1][0]就是处理后想得到的形式  </p><pre><code>Array([total] =&gt; 1[items] =&gt; Array    (       .       .       .        [1] =&gt; Array            (                [0] =&gt; Array                    (                        [pv_count] =&gt; 11201                        [visitor_count] =&gt; 745                        [bounce_ratio] =&gt; 46.15                        [avg_visit_time] =&gt; 426                        [avg_visit_pages] =&gt; 12.34                        [time] =&gt; 2018/06/22                    )            )        .        .        .)            </code></pre><p>最后在控制器中调用getBdData方法获取数据并存入数据库</p><pre><code class="php"> public function getBdTongJi(){        require_once(APP_PATH.&#39;Admin/Lib/bdtongji/GetData.php&#39;);        $start_date = I(&#39;get.start&#39;,&#39;&#39;,&#39;strval&#39;);        $end_date = I(&#39;get.end&#39;,&#39;&#39;,&#39;strval&#39;);        if(!$start_date||!$end_date){            $time = date(&#39;Ymd&#39;,time())-1;            $start_date = $time;            $end_date = $time;        }        $bdCount = M(&#39;bd_count&#39;);        $res = getBdData($start_date,$end_date,&#39;day&#39;,&#39;pv_count,bounce_ratio,visitor_count,avg_visit_time,avg_visit_pages&#39;);        foreach ($res as &amp;$data){            $data[&#39;count_time&#39;]=strtotime($data[&#39;time&#39;]);            if(!$bdCount-&gt;where(array(&#39;count_time&#39;=&gt;$data[&#39;count_time&#39;]))-&gt;count()){                $bdCount-&gt;add($data);            }        }        unset($data);    }</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;百度统计开放平台是百度统计全新推出的，业务数据收集（获取网站的PV UV 等数据）、导出以及应用为一体的开放体系，由JS API和tongji API两部分组成。&lt;br&gt;
    
    </summary>
    
    
      <category term="百度统计" scheme="http://yoursite.com/tags/%E7%99%BE%E5%BA%A6%E7%BB%9F%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>PHP第三方登录—OAuth2.0协议</title>
    <link href="http://yoursite.com/2018/05/01/OAuth/"/>
    <id>http://yoursite.com/2018/05/01/OAuth/</id>
    <published>2018-05-01T14:32:36.000Z</published>
    <updated>2018-05-27T12:14:32.003Z</updated>
    
    <content type="html"><![CDATA[<p>OAuth 是一个开放标准，允许用户让第三方应用访问该用户在某一网站上存储的私密的资源（如照片，视频，联系人列表），而无需将用户名和密码提供给第三方应用。目前，OAuth 的最新版本为 2.0<br><a id="more"></a></p><p>OAuth 允许用户提供一个令牌，而不是用户名和密码来访问他们存放在特定服务提供者的数据。每一个令牌授权一个特定的网站（例如，视频编辑网站)在特定的时段（例如，接下来的2小时内）内访问特定的资源（例如仅仅是某一相册中的视频）。这样，OAuth 允许用户授权第三方网站访问他们存储在另外的服务提供者上的信息，而不需要分享他们的访问许可或他们数据的所有内容。</p><p>OAuth授权流程<br>1.请求OAuth登陆页<br>Request Token URL - 未授权的令牌请求服务地址<br>2.用户使用第三方账号登陆并授权<br>3.返回登陆结果<br>User Authorization URL - 用户授权的令牌请求服务地址<br>AccessToken - 用户通过第三方应用访问OAuth接口令牌</p><p>新浪微博登陆 (<a href="http://open.weibo.com" target="_blank" rel="noopener">http://open.weibo.com</a>)<br>1.申请AppID和AppKey<br>2.下载PHP版本SDK<br>3.接入开发</p><p>QQ登陆 (<a href="http://connect.qq.com" target="_blank" rel="noopener">http://connect.qq.com</a>)<br>1.申请AppID和AppKey<br>2.下载PHP版本SDK<br>3.SDK配置<br>4.接入开发</p><p>以微博登陆为例：<br>config.php</p><pre><code class="php">define(&#39;WB_KEY&#39;,&#39;获取的AppKey&#39;);define(&#39;WB_SRC&#39;,&#39;获取的AppSecret&#39;);define(&#39;CALLBACK&#39;,&#39;回调地址(callback.php)&#39;);</code></pre><p>wblogin.php</p><pre><code class="php">&lt;?phprequire_once &#39;config.php&#39;;require_once &#39;saetv2.ex.class.php&#39;;$o = new SaeTOAuthV2(&#39;WB_KEY&#39;,&#39;WB_SRC&#39;);$url = CALLBACK；$oauth = $o-&gt;getAuthorizeUrl($url);header(&#39;Location: &#39;.$oauth);</code></pre><p>callback.php</p><pre><code class="php">&lt;?phprequire_once &#39;config.php&#39;;require_once &#39;saetv2.ex.class.php&#39;;$code = $_GET(&#39;code&#39;);$keys[&#39;code&#39;] = $code;$keys[&#39;redirect_uri&#39;] = CALLBACK;$o = new SaeTOAuthV2(&#39;WB_KEY&#39;,&#39;WB_SRC&#39;);$auth = $o-&gt;getAccessToken($keys);setcookie(&#39;accesstoken&#39;,$auth[&#39;access_token&#39;],time()+86400);header(&#39;location: index.php&#39;);</code></pre><p>index.php</p><pre><code class="php">&lt;?php     equire_once &#39;config.php&#39;;     require_once &#39;saetv2.ex.class.php&#39;;    $isLogin=isset($_COOKIE[&#39;accesstoken&#39;]);?&gt;&lt;!DOCTYPE html&gt;&lt;html&gt;     &lt;head&gt;          &lt;meta charset=&quot;UTF-8&quot;&gt;          &lt;title&gt;微博测试&lt;/title&gt;     &lt;/head&gt;     &lt;body&gt;          &lt;?php if(!$isLogin){ ?&gt;               &lt;a href=&#39;wblogin.php&#39;&gt;&lt;img src=&#39;./weibo_login.png&#39;&gt;&lt;/a&gt;          &lt;?php }else{ ?&gt;              您已成功登陆微博账号；          &lt;?php             $o = new SaeTClientV2(&#39;WB_KEY&#39;,&#39;WB_SRC&#39;,$_COOKIE[&#39;accesstoken&#39;]);     //调用接口发布微博             $o-&gt;update(&#39;发布微博&#39;);          } ?&gt;     &lt;/body&gt;&lt;/html&gt;</code></pre><p>debug调试方法</p><pre><code class="php">function debug($val,$dump = false,$exit = true) {    //自动获取函数名称$func    if($dump){          $func = &#39;var_dump&#39;;     } else {          $func = (is_array($val) || is_object($val) )? &#39;print_r&#39; : &#39;printf&#39;;     }    header(&quot;Content-type: text/html; charset = utf-8&quot;);    echo &#39;&lt;pre&gt;debug output:&lt;hr /&gt;&#39;;    $func($val);    echo &#39;&lt;/pre&gt;&#39;;    if($exit); exit;}</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;OAuth 是一个开放标准，允许用户让第三方应用访问该用户在某一网站上存储的私密的资源（如照片，视频，联系人列表），而无需将用户名和密码提供给第三方应用。目前，OAuth 的最新版本为 2.0&lt;br&gt;
    
    </summary>
    
    
      <category term="PHP" scheme="http://yoursite.com/tags/PHP/"/>
    
      <category term="OAuth2.0" scheme="http://yoursite.com/tags/OAuth2-0/"/>
    
  </entry>
  
  <entry>
    <title>PHP实现文件上传与下载</title>
    <link href="http://yoursite.com/2018/05/01/setdoc/"/>
    <id>http://yoursite.com/2018/05/01/setdoc/</id>
    <published>2018-05-01T14:18:17.000Z</published>
    <updated>2018-05-27T13:15:35.669Z</updated>
    
    <content type="html"><![CDATA[<p>文件上传原理：将客户端的文件上传到服务器端，再将服务器端的临时文件移动到指定目录即可。<br><a id="more"></a></p><h4 id="客户端配置："><a href="#客户端配置：" class="headerlink" title="客户端配置："></a>客户端配置：</h4><p>表单页面<br>表单发送方式为 post<br>添加 enctype=”multipart/form-data”</p><p>通过使用 PHP 的全局数组 $_FILES，你可以从客户计算机向远程服务器上传文件。</p><p>第一个参数是表单的 input name，第二个下标可以是 “name”, “type”, “size”, “tmp_name” 或 “error”。就像这样：</p><p>$_FILES[“file”][“name”] - 被上传文件的名称<br>$_FILES[“file”][“type”] - 被上传文件的类型<br>$_FILES[“file”][“size”] - 被上传文件的大小，以字节计<br>$_FILES[“file”][“tmp_name”] - 存储在服务器的文件的临时副本的名称<br>$_FILES[“file”][“error”] - 由文件上传导致的错误代码</p><p>move_uploaded_file() 函数将上传的文件移动到新位置。</p><p>若成功，则返回 true，否则返回 false。</p><p>move_uploaded_file(file,newloc)</p><p>将文件从 source 拷贝到 destination。如果成功则返回 TRUE，否则返回 FALSE。<br>copy(source,destination)</p><h4 id="文件上传配置"><a href="#文件上传配置" class="headerlink" title="文件上传配置"></a>文件上传配置</h4><p>file_uploads=on,支持HTTP上传<br>upload_tmp_dir=,临时文件保存的目录<br>upload_max_filesize=2M,允许上传文件的最大值<br>max_file_uploads=20,允许文件上传的最大文件数<br>post_max_size=8M,POST方式发送数据的最大值<br>max_execution_time=-1,设置了脚本被解析器终止之前允许的最大执行时间，单位为秒，防止程序写的不好而占尽服务器资源<br>max_input_time=60,脚本解析输入数据允许的最大时间，单位为秒<br>max_input_nesting_level=64,设置输入变量的嵌套深度<br>max_input_vars=1000,接受多少输入的变量（限制分别应用于$_GET、$_POST和$_COOKIE超全局变量）指令的使用减轻了以哈希碰撞来进行拒绝服务器攻击的可能性。如果有超过指令指定数量的变量，将会导致$_WARNING的产生，更多的输入变量将会从请求中截断。<br>memory_limit=128M,最大单线程的独立内存使用量。也就是一个web请求，给予线程最大使用量的定义。</p><h4 id="错误信息说明"><a href="#错误信息说明" class="headerlink" title="错误信息说明"></a>错误信息说明</h4><p>1、UPLOAD_ERR_OK</p><p>其值为 0，没有错误发生，文件上传成功。</p><p>2、UPLOAD_ERR_INI_SIZE</p><p>其值为 1，上传的文件超过了 php.ini 中 upload_max_filesize选项限制的值。</p><p>3、UPLOAD_ERR_FORM_SIZE</p><p>其值为 2，上传文件的大小超过了 HTML 表单中 MAX_FILE_SIZE 选项指定的值。</p><p>4、UPLOAD_ERR_PARTIAL</p><p>其值为 3，文件只有部分被上传。</p><p>5、UPLOAD_ERR_NO_FILE</p><p>其值为 4，没有文件被上传。</p><p>6、UPLOAD_ERR_NO_TMP_DIR</p><p>其值为 6，找不到临时文件夹。PHP 4.3.10 和 PHP 5.0.3 引进。</p><p>7、UPLOAD_ERR_CANT_WRITE</p><p>其值为 7，文件写入失败。PHP 5.1.0 引进。</p><p>8、UPLOAD_ERR_EXTENSION</p><p>其值为 8，上传的文件被PHP扩展程序中断</p><h4 id="上传文件限制"><a href="#上传文件限制" class="headerlink" title="上传文件限制"></a>上传文件限制</h4><p>通过表单隐藏域限制文件上传的最大值</p><pre><code class="html">&lt;input type=&quot;hidden&quot; name=&#39;MAX_FILE_SIZE&#39; value=&#39;字节数&#39; /&gt;</code></pre><p>通过accept属性限制上传文件类型</p><pre><code class="html">&lt;input type=&quot;file&quot; name=&quot;file&quot; accept=&quot;文件的MIME类型&quot; /&gt;</code></pre><p>（ps:表单限制不可靠）<br>服务器限制<br>限制文件上传的大小、类型、检测类型、检测是否为HTTP POST方式上传</p><h4 id="文件下载"><a href="#文件下载" class="headerlink" title="文件下载"></a>文件下载</h4><pre><code class="php">$filename=$_GET[&#39;filename&#39;];header(&#39;Content-Disposition:attachment;filename=&#39;.$filename);header(&quot;Content-length:&quot;.filesize($filename));readfile($filename);</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;文件上传原理：将客户端的文件上传到服务器端，再将服务器端的临时文件移动到指定目录即可。&lt;br&gt;
    
    </summary>
    
    
      <category term="PHP" scheme="http://yoursite.com/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>layui-Ajax分页</title>
    <link href="http://yoursite.com/2018/04/10/layui-page/"/>
    <id>http://yoursite.com/2018/04/10/layui-page/</id>
    <published>2018-04-09T16:20:28.000Z</published>
    <updated>2018-04-09T16:46:07.480Z</updated>
    
    <content type="html"><![CDATA[<p>layPage 致力于提供极致的分页逻辑，既可轻松胜任异步分页，也可作为页面刷新式分页。下面是使用layui分页控件实现异步请求分页操作的实现方法。<br><a id="more"></a></p><pre><code class="javascript">//引入组件js和css&lt;script src=&quot;__STATIC__/layui/layui.js&quot;&gt;&lt;/script&gt;&lt;link rel=&quot;stylesheet&quot; href=&quot;__STATIC__/layui/css/layui.css&quot;&gt;$(function () {        var url = &#39;请求地址&#39;        var data = {};        data.page = 1;        ajax(data);        function ajax(data) {            $.ajax({                type: &quot;post&quot;,                url: url,                data: data,                success: function (result) {                    var res = result.data;                    var count = result.count;                    var page = result.page;                    var limit = result.limit;                    console.log(res); //查看服务器返回的数据                    if(count&gt;limit){                        lay_page(count,limit,page);                    }                }            })        }        function lay_page(count,limit,page) {            layui.use([&#39;laypage&#39;, &#39;layer&#39;], function() {                var laypage = layui.laypage                        , layer = layui.layer;                laypage.render({                    elem: &#39;指向存放分页的容器，值可以是容器ID、DOM对象&#39;                    , count: count //数据总数，从服务端得到                    , limit: limit //每页显示的条数                    , curr: page                    , jump: function (obj, first) {                        //obj包含了当前分页的所有参数，比如：                        //console.log(obj.curr); //得到当前页，以便向服务端请求对应页的数据。                        //console.log(obj.limit); //得到每页显示的条数                        //首次不执行                        if (!first) {                            data.page=obj.curr;                            ajax(data);                        }                    }                });            });        }    })</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;layPage 致力于提供极致的分页逻辑，既可轻松胜任异步分页，也可作为页面刷新式分页。下面是使用layui分页控件实现异步请求分页操作的实现方法。&lt;br&gt;
    
    </summary>
    
    
      <category term="layui" scheme="http://yoursite.com/tags/layui/"/>
    
      <category term="Ajax" scheme="http://yoursite.com/tags/Ajax/"/>
    
  </entry>
  
  <entry>
    <title>支付宝手机网站支付(PHP)</title>
    <link href="http://yoursite.com/2018/04/07/alipay-wap/"/>
    <id>http://yoursite.com/2018/04/07/alipay-wap/</id>
    <published>2018-04-07T14:29:02.000Z</published>
    <updated>2018-05-27T12:50:06.782Z</updated>
    
    <content type="html"><![CDATA[<p>关于接入的步骤可以参考上一篇《支付宝APP支付服务端接入(PHP)》，详细可以看<a href="https://docs.open.alipay.com/203/105285/" target="_blank" rel="noopener">官方文档</a><br>下面就不多说了，接入开发，首先还是下载官方的sdk,然后进行调用。<br><a id="more"></a><br>实现方法<br>手机网站支付请求示例</p><pre><code class="php">public function alipay(){        require_once(&quot;alipay/wappay/service/AlipayTradeService.php&quot;);        require_once(&quot;alipay/wappay/buildermodel/AlipayTradeWapPayContentBuilder.php&quot;);        require_once(&quot;alipay/config.php&quot;);        //商户订单号，商户网站订单系统中唯一订单号，必填        $out_trade_no = &#39;商户订单号&#39;;        //订单名称，必填        $subject = &#39;订单名称&#39;;        //付款金额，必填        $total_amount = &#39;付款金额&#39;;        //商品描述，可空        $body = &#39;商品描述&#39;;        //超时时间        $timeout_express=&quot;1m&quot;;        $payRequestBuilder = new \AlipayTradeWapPayContentBuilder();        $payRequestBuilder-&gt;setBody($body);        $payRequestBuilder-&gt;setSubject($subject);        $payRequestBuilder-&gt;setOutTradeNo($out_trade_no);        $payRequestBuilder-&gt;setTotalAmount($total_amount);        $payRequestBuilder-&gt;setTimeExpress($timeout_express);        $payResponse = new \AlipayTradeService($config);        $payResponse-&gt;wapPay($payRequestBuilder,$config[&#39;return_url&#39;],$config[&#39;notify_url&#39;]);    }</code></pre><p>调起支付宝app支付示例</p><pre><code class="javascript">//由于微信浏览器屏蔽支付宝链接 官方给出跳出微信环境支付的解决方案 引入ap.js（将ap.js和pay.htm放在网站根目录）&lt;script type=&quot;text/javascript&quot; src=&quot;ap.js&quot;&gt;&lt;/script&gt;    &lt;script&gt;        $(document).on(&#39;click&#39;,&#39;[data-role=&quot;alipay&quot;]&#39;,function (e) {            var order_id = $(this).attr(&#39;data-id&#39;);            var ua = window.navigator.userAgent.toLowerCase();            $.post(&quot;{:U(&#39;xxx/xxx/alipay&#39;)}&quot;,{order_id:order_id},function (res) {                if(res.status==false){                    $.toast(res.info);                }else {                    if(ua.match(/MicroMessenger/i) == &#39;micromessenger&#39;){//判断微信浏览器                        e.preventDefault();                        e.stopPropagation();                        e.stopImmediatePropagation();                        _AP.pay(res);                        return false;                    }else{                        window.location.href = res;                    }                }            });        })    &lt;/script&gt;</code></pre><p>回调示例</p><pre><code class="php">public function alipay_notify()    {        require_once(&quot;alipay/wappay/service/AlipayTradeService.php&quot;);        require_once(&quot;alipay/config.php&quot;);        $arr = $_POST;        $alipaySevice = new \AlipayTradeService($config);        $alipaySevice-&gt;writeLog(var_export($_POST, true));        $result = $alipaySevice-&gt;check($arr);        if ($result) {//验证成功            //商户订单号            $out_trade_no = $_POST[&#39;out_trade_no&#39;];            //支付宝交易号            $trade_no = $_POST[&#39;trade_no&#39;];            //交易状态            $trade_status = $_POST[&#39;trade_status&#39;];            if ($_POST[&#39;trade_status&#39;] == &#39;TRADE_FINISHED&#39;) {                //判断该笔订单是否在商户网站中已经做过处理                //如果没有做过处理，根据订单号（out_trade_no）在商户网站的订单系统中查到该笔订单的详细，并执行商户的业务程序                //请务必判断请求时的total_amount与通知时获取的total_fee为一致的                //如果有做过处理，不执行商户的业务程序                //注意：                //退款日期超过可退款期限后（如三个月可退款），支付宝系统发送该交易状态通知            } else if ($_POST[&#39;trade_status&#39;] == &#39;TRADE_SUCCESS&#39;) {                //支付成功                /**                * 业务逻辑                */                echo &quot;success&quot;;        //请不要修改或删除            } else {                //验证失败                echo &quot;fail&quot;;    //请不要修改或删除            }        }    }</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;关于接入的步骤可以参考上一篇《支付宝APP支付服务端接入(PHP)》，详细可以看&lt;a href=&quot;https://docs.open.alipay.com/203/105285/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;官方文档&lt;/a&gt;&lt;br&gt;下面就不多说了，接入开发，首先还是下载官方的sdk,然后进行调用。&lt;br&gt;
    
    </summary>
    
    
      <category term="PHP" scheme="http://yoursite.com/tags/PHP/"/>
    
      <category term="支付宝支付" scheme="http://yoursite.com/tags/%E6%94%AF%E4%BB%98%E5%AE%9D%E6%94%AF%E4%BB%98/"/>
    
  </entry>
  
  <entry>
    <title>微信支付JSAPI(PHP)</title>
    <link href="http://yoursite.com/2018/04/07/wechat-jsapi/"/>
    <id>http://yoursite.com/2018/04/07/wechat-jsapi/</id>
    <published>2018-04-07T09:46:29.000Z</published>
    <updated>2018-05-27T13:20:36.883Z</updated>
    
    <content type="html"><![CDATA[<p>公众号支付是用户在微信中打开商户的H5页面，商户在H5页面通过调用微信支付提供的JSAPI接口调起微信支付模块完成支付。适用于微信浏览器内完成微信支付。配置参考<a href="https://pay.weixin.qq.com/wiki/doc/api/jsapi.php?chapter=7_3" target="_blank" rel="noopener">官方文档</a><br><a id="more"></a><br>实现方法<br>统一下单示例</p><pre><code class="php">        $tools = new JsApiPay();        $openId = $tools-&gt;GetOpenid();//获取openid        $input = new WxPayUnifiedOrder();        $input-&gt;SetBody($name);//商品描述        $input-&gt;SetOut_trade_no($out_trade_no);//订单号        $input-&gt;SetTotal_fee($amount);//订单总金额，单位分        $input-&gt;SetTime_start(date(&quot;YmdHis&quot;));        $input-&gt;SetTime_expire(date(&quot;YmdHis&quot;, time() + 600));        $input-&gt;SetNotify_url(&quot;回调域名&quot;);        $input-&gt;SetTrade_type(&quot;JSAPI&quot;);//交易类型        $input-&gt;SetOpenid($openId);        $order = WxPayApi::unifiedOrder($input);//统一下单接口        $jsApiParameters = $tools-&gt;GetJsApiParameters($order);</code></pre><p>调起微信支付示例</p><pre><code class="javascript">&lt;script type=&quot;text/javascript&quot;&gt;    //调用微信JS api 支付    function jsApiCall()    {        WeixinJSBridge.invoke(            &#39;getBrandWCPayRequest&#39;,{                &quot;appId&quot;:&quot;wx2421b1c4370ec43b&quot;,     //公众号名称，由商户传入                     &quot;timeStamp&quot;:&quot;1395712654&quot;,         //时间戳，自1970年以来的秒数                     &quot;nonceStr&quot;:&quot;e61463f8efa94090b1f366cccfbbb444&quot;, //随机串                     &quot;package&quot;:&quot;prepay_id=u802345jgfjsdfgsdg888&quot;,                     &quot;signType&quot;:&quot;MD5&quot;,         //微信签名方式：                     &quot;paySign&quot;:&quot;70EA570631E4BB79628FBCA90534C63FF7FADD89&quot; //微信签名        },        function(res){            if(res.err_msg == &quot;get_brand_wcpay_request:ok&quot;){                if(res.err_msg == &quot;get_brand_wcpay_request:ok&quot; ) {}     // 使用以上方式判断前端返回,微信团队郑重提示：res.err_msg将在用户支付成功后返回    ok，但并不保证它绝对可靠。             }        }    );    }    function callpay()    {        if (typeof WeixinJSBridge == &quot;undefined&quot;){            if( document.addEventListener ){                document.addEventListener(&#39;WeixinJSBridgeReady&#39;, jsApiCall, false);            }else if (document.attachEvent){                document.attachEvent(&#39;WeixinJSBridgeReady&#39;, jsApiCall);                document.attachEvent(&#39;onWeixinJSBridgeReady&#39;, jsApiCall);            }        }else{            jsApiCall();        }    }    $(function(){        callpay();    })&lt;/script&gt;</code></pre><p>回调处理示列</p><pre><code class="php">$WxPay = new \WxPayResults();header(&#39;Content-type: text/xml&#39;);$returnResult = $GLOBALS[&#39;HTTP_RAW_POST_DATA&#39;]; //接收微信发送的信息$res = $WxPay::Init($returnResult);if(res[&#39;result_code&#39;] == &#39;SUCCESS&#39;){/** 业务处理*/$success = array(&#39;return_code&#39; =&gt; &#39;SUCCESS&#39;, &#39;return_msg&#39; =&gt; &#39;OK&#39;);exit(ToXml($success));//转成xml通知给微信}</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;公众号支付是用户在微信中打开商户的H5页面，商户在H5页面通过调用微信支付提供的JSAPI接口调起微信支付模块完成支付。适用于微信浏览器内完成微信支付。配置参考&lt;a href=&quot;https://pay.weixin.qq.com/wiki/doc/api/jsapi.php?chapter=7_3&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;官方文档&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="PHP" scheme="http://yoursite.com/tags/PHP/"/>
    
      <category term="微信支付" scheme="http://yoursite.com/tags/%E5%BE%AE%E4%BF%A1%E6%94%AF%E4%BB%98/"/>
    
  </entry>
  
  <entry>
    <title>微信支付企业付款(PHP)</title>
    <link href="http://yoursite.com/2018/04/07/wechat-mch-pay/"/>
    <id>http://yoursite.com/2018/04/07/wechat-mch-pay/</id>
    <published>2018-04-07T08:56:01.000Z</published>
    <updated>2018-05-27T13:21:22.144Z</updated>
    
    <content type="html"><![CDATA[<p>企业付款为企业提供付款至用户零钱的能力，支持通过API接口付款，或通过微信支付商户平台（pay.weixin.qq.com）网页操作付款。配置和说明可以参考<a href="https://pay.weixin.qq.com/wiki/doc/api/tools/mch_pay.php?chapter=14_1/" target="_blank" rel="noopener">官方文档</a><br><a id="more"></a><br>实现方法<br>在微信官方SDK的WxPay.Api.php添加参考代码：<br>企业向个人付款</p><pre><code class="php">    public function mchPay($params)    {      $url = &quot;https://api.mch.weixin.qq.com/mmpaymkttransfers/promotion/transfers&quot;;        //检测必填参数        if($params[&quot;partner_trade_no&quot;] == null) {            throw new WxPayException(&quot;企业付款申请接口中，缺少必填参数partner_trade_no！&quot;);        }else if($params[&quot;openid&quot;] == null){            throw new WxPayException(&quot;企业付款申请接口中，缺少必填参数openid！&quot;);        }else if($params[&quot;check_name&quot;] == null){            throw new WxPayException(&quot;企业付款申请接口中，缺少必填参数check_name！&quot;);        }else if($params[&quot;amount&quot;] == null){            throw new WxPayException(&quot;企业付款申请接口中，缺少必填参数amount！&quot;);        }else if($params[&quot;desc&quot;] == null){            throw new WxPayException(&quot;企业付款申请接口中，缺少必填参数desc！&quot;);        }        $params[&quot;mch_appid&quot;] = WxPayConfig::APPID();//公众账号ID        $params[&quot;mchid&quot;] = WxPayConfig::MCHID();//商户号        $params[&quot;nonce_str&quot;] = self::getNonceStr();//随机字符串        $params[&#39;spbill_create_ip&#39;] = $_SERVER[&#39;REMOTE_ADDR&#39;] == &#39;::1&#39; ? &#39;192.127.1.1&#39; : $_SERVER[&#39;REMOTE_ADDR&#39;];//获取IP        $obj = new \WxPayDataBase();        $params[&quot;sign&quot;] = $this-&gt;MakeSign($params);//签名        $xml = $this-&gt;arrayToXml($params);        $response = self::postXmlCurl($xml, $url, true);        $obj-&gt;FromXml($response);        return $obj-&gt;GetValues();    }</code></pre><pre><code class="php">    //array转xml    public function arrayToXml($arr)    {        $xml = &quot;&lt;xml&gt;&quot;;        foreach ($arr as $key=&gt;$val)        {            if (is_numeric($val))            {                $xml.=&quot;&lt;&quot;.$key.&quot;&gt;&quot;.$val.&quot;&lt;/&quot;.$key.&quot;&gt;&quot;;            }            else                $xml.=&quot;&lt;&quot;.$key.&quot;&gt;&lt;![CDATA[&quot;.$val.&quot;]]&gt;&lt;/&quot;.$key.&quot;&gt;&quot;;        }        $xml.=&quot;&lt;/xml&gt;&quot;;        return $xml;    }</code></pre><pre><code class="php">    //生成签名    public function MakeSign($params)    {        //签名步骤一：按字典序排序参数        ksort($params);        $string = $this-&gt;ToUrlParams($params);        //签名步骤二：在string后加入KEY        $string = $string . &quot;&amp;key=&quot;.WxPayConfig::KEY();        //签名步骤三：MD5加密        $string = md5($string);        //签名步骤四：所有字符转为大写        $result = strtoupper($string);        return $result;    }    public function ToUrlParams($params)    {        $buff = &quot;&quot;;        foreach ($params as $k =&gt; $v)        {            if($k != &quot;sign&quot; &amp;&amp; $v != &quot;&quot; &amp;&amp; !is_array($v)){                $buff .= $k . &quot;=&quot; . $v . &quot;&amp;&quot;;            }        }        $buff = trim($buff, &quot;&amp;&quot;);        return $buff;    }</code></pre><p>调用示例：</p><pre><code class="php">    $mchPay = new \WxPayApi();      $amount = &#39;付款金额&#39;;//企业付款金额，单位“分”    $desc = &#39;企业付款&#39;;//描述    $partner_trade_no = &#39;订单号&#39;;    $openid = &#39;用户oppenid&#39;;    $params = array(        &#39;partner_trade_no&#39; =&gt; $partner_trade_no,        &#39;openid&#39; =&gt; $openid,        &#39;check_name&#39; =&gt; &#39;NO_CHECK&#39;,//不校验姓名        &#39;amount&#39; =&gt; $amount,        &#39;desc&#39; =&gt; $desc,    );    $toPay = $mchPay-&gt;mchPay($params);    if($toPay[&quot;return_code&quot;]==&quot;SUCCESS&quot;&amp;&amp;$toPay[&quot;result_code&quot;]==&quot;SUCCESS&quot;){        /**        * 业务逻辑 数据库操作        */        echo &quot;付款成功&quot;;     }else{        //输出错误信息        echo $toPay[&#39;err_code&#39;].$toPay[&#39;err_code_des&#39;];    }</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;企业付款为企业提供付款至用户零钱的能力，支持通过API接口付款，或通过微信支付商户平台（pay.weixin.qq.com）网页操作付款。配置和说明可以参考&lt;a href=&quot;https://pay.weixin.qq.com/wiki/doc/api/tools/mch_pay.php?chapter=14_1/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;官方文档&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="PHP" scheme="http://yoursite.com/tags/PHP/"/>
    
      <category term="微信支付" scheme="http://yoursite.com/tags/%E5%BE%AE%E4%BF%A1%E6%94%AF%E4%BB%98/"/>
    
  </entry>
  
  <entry>
    <title>支付宝APP支付服务端接入(PHP)</title>
    <link href="http://yoursite.com/2018/04/07/alipay/"/>
    <id>http://yoursite.com/2018/04/07/alipay/</id>
    <published>2018-04-07T08:04:00.000Z</published>
    <updated>2018-05-27T12:52:03.319Z</updated>
    
    <content type="html"><![CDATA[<p>第一步：创建应用并获取APPID<br>要在您的应用中接入支付宝App支付能力，需要通过创建应用的方式接入蚂蚁相关接口并进行开发，在创建应用后即生成应用的标识APPID，使用支付宝账号登录开放平台后，在“我的应用”中查看APPID。<br><a id="more"></a><br>第二步：配置应用<br>添加app支付功能——&gt;签约——&gt;配置密钥<br>第三步：集成和开发<br>集成服务端SDK<br><img src="/2018/04/07/alipay/sdk.png"><br>获取PHP版资源SDK要注意开发环境最好达到官方建议的环境要求，否则集成过程中要对SDK作调整来适配环境。<br>PHP服务端SDK生成APP支付订单信息示例</p><pre><code class="php">$aop = new AopClient;$aop-&gt;gatewayUrl = &quot;https://openapi.alipay.com/gateway.do&quot;;$aop-&gt;appId = &quot;app_id&quot;;$aop-&gt;rsaPrivateKey = &#39;请填写开发者私钥去头去尾去回车，一行字符串&#39;;$aop-&gt;format = &quot;json&quot;;$aop-&gt;charset = &quot;UTF-8&quot;;$aop-&gt;signType = &quot;RSA2&quot;;$aop-&gt;alipayrsaPublicKey = &#39;请填写支付宝公钥，一行字符串&#39;;//实例化具体API对应的request类,类名称和接口名称对应,当前调用接口名称：alipay.trade.app.pay$request = new AlipayTradeAppPayRequest();//SDK已经封装掉了公共参数，这里只需要传入业务参数$bizcontent = &quot;{\&quot;body\&quot;:\&quot;我是测试数据\&quot;,&quot;                 . &quot;\&quot;subject\&quot;: \&quot;App支付测试\&quot;,&quot;                . &quot;\&quot;out_trade_no\&quot;: \&quot;20170125test01\&quot;,&quot;                . &quot;\&quot;timeout_express\&quot;: \&quot;30m\&quot;,&quot;                 . &quot;\&quot;total_amount\&quot;: \&quot;0.01\&quot;,&quot;                . &quot;\&quot;product_code\&quot;:\&quot;QUICK_MSECURITY_PAY\&quot;&quot;                . &quot;}&quot;;$request-&gt;setNotifyUrl(&quot;商户外网可以访问的异步地址&quot;);$request-&gt;setBizContent($bizcontent);//这里和普通的接口调用不同，使用的是sdkExecute$response = $aop-&gt;sdkExecute($request);//htmlspecialchars是为了输出到页面时防止被浏览器将关键参数html转义，实际打印到日志以及http传输不会有这个问题echo htmlspecialchars($response);//就是orderString 可以直接给客户端请求，无需再做处理。</code></pre><p>PHP服务端验证异步通知信息参数示例</p><pre><code class="cpp">$aop = new AopClient;$aop-&gt;alipayrsaPublicKey = &#39;请填写支付宝公钥，一行字符串&#39;;$flag = $aop-&gt;rsaCheckV1($_POST, NULL, &quot;RSA2&quot;);</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;第一步：创建应用并获取APPID&lt;br&gt;要在您的应用中接入支付宝App支付能力，需要通过创建应用的方式接入蚂蚁相关接口并进行开发，在创建应用后即生成应用的标识APPID，使用支付宝账号登录开放平台后，在“我的应用”中查看APPID。&lt;br&gt;
    
    </summary>
    
    
      <category term="PHP" scheme="http://yoursite.com/tags/PHP/"/>
    
      <category term="支付宝支付" scheme="http://yoursite.com/tags/%E6%94%AF%E4%BB%98%E5%AE%9D%E6%94%AF%E4%BB%98/"/>
    
  </entry>
  
  <entry>
    <title>微信APP支付服务端接入(PHP)</title>
    <link href="http://yoursite.com/2018/04/07/wechat/"/>
    <id>http://yoursite.com/2018/04/07/wechat/</id>
    <published>2018-04-07T08:01:16.000Z</published>
    <updated>2018-05-27T13:22:50.715Z</updated>
    
    <content type="html"><![CDATA[<p>第一步：申请微信APP支付<br>微信开放平台是商户APP接入微信支付开放接口的申请入口，通过此平台可申请微信APP支付。<br><a id="more"></a><br>第二步：配置商户支付密钥<br>微信商户平台是微信支付相关的商户功能集合，登录微信商户平台后按以下步骤操作：<br>1.点击帐户中心——操作证书——安装安全控件——安装操作证书（要验证手机号码）<br>2.点击帐户中心——API安全——设置API密钥——确认——新密钥——手机验证码——登录密码<br>第三步：集成和开发<br>集成服务端SDK<br><img src="/2018/04/07/wechat/sdk.png"><br>微信APP支付统一下单示例</p><pre><code class="php">$input = new WxPayUnifiedOrder();$input-&gt;SetBody(&quot;test&quot;); //商品描述$input-&gt;SetOut_trade_no(&quot;商户订单号&quot;);$input-&gt;SetTotal_fee(&quot;1&quot;); //订单总金额，注意单位为分$input-&gt;SetTime_start(date(&quot;YmdHis&quot;));$input-&gt;SetTime_expire(date(&quot;YmdHis&quot;, time() + 600));$input-&gt;SetNotify_url(&quot;商户外网可以访问的异步地址&quot;);$input-&gt;SetTrade_type(&quot;APP&quot;);$order = WxPayApi::unifiedOrder($input); //调用统一下单接口</code></pre><p>调起支付<br>商户服务器生成支付订单，先调用【统一下单API】生成预付单，获取到prepay_id后将参数再次签名传输给APP发起支付。以下是调起微信支付的关键代码：</p><pre><code class="php">$order_data = $WxPayApi-&gt;GetAppParameters($order); //调起支付所需的请求参数</code></pre><p>GetAppParameters()是外加的代码，微信SDK中没有这个方法，下面是在微信SDK中代码APP支付补充部分。<br>在WxPay.Api.php中补充代码：</p><pre><code class="php">/** * * 获取App支付的参数 * @param array $UnifiedOrderResult 统一支付接口返回的数据 * @throws WxPayException *  * @return $parameters */public function GetAppParameters($UnifiedOrderResult){    if(!array_key_exists(&quot;appid&quot;, $UnifiedOrderResult)        || !array_key_exists(&quot;prepay_id&quot;, $UnifiedOrderResult)        || $UnifiedOrderResult[&#39;prepay_id&#39;] == &quot;&quot;        || !array_key_exists(&quot;mch_id&quot;, $UnifiedOrderResult)        || $UnifiedOrderResult[&#39;mch_id&#39;] == &quot;&quot;)    {        throw new WxPayException(&quot;参数错误&quot;);    }    $app = new WxPayAppPay();    $app-&gt;SetAppid($UnifiedOrderResult[&quot;appid&quot;]);    $app-&gt;SetPrepayId($UnifiedOrderResult[&quot;prepay_id&quot;]);    $app-&gt;SetPartnerId($UnifiedOrderResult[&#39;mch_id&#39;]);    $timeStamp = time();    $app-&gt;SetTimeStamp(&quot;$timeStamp&quot;);    $app-&gt;SetNonceStr(WxPayApi::getNonceStr());    $app-&gt;SetPackage(&quot;Sign=WXPay&quot;);    $app-&gt;SetPaySign($app-&gt;MakeSign());    $parameters = $app-&gt;GetValues();    return $parameters;}</code></pre><p>在WxPay.Data.php中补充代码：</p><pre><code class="php">/** * * 提交App输入对象 * @author lin * */class WxPayAppPay extends WxPayDataBase{    /**     * 设置微信分配的公众账号ID     * @param string $value     **/    public function SetAppid($value)    {        $this-&gt;values[&#39;appid&#39;] = $value;    }    /**     * 设置预支付交易会话ID     * @param string $value     **/    public function SetPrepayId($value)    {        $this-&gt;values[&#39;prepayid&#39;] = $value;    }    /**     * 设置商户号ID     * @param string $value     **/    public function SetPartnerId($value)    {        $this-&gt;values[&#39;partnerid&#39;] = $value;    }    /**     * 设置支付时间戳     * @param string $value     **/    public function SetTimeStamp($value)    {        $this-&gt;values[&#39;timestamp&#39;] = $value;    }    /**     * 随机字符串     * @param string $value     **/    public function SetNonceStr($value)    {        $this-&gt;values[&#39;noncestr&#39;] = $value;    }    /**     * 设置订单详情扩展字符串     * @param string $value     **/    public function SetPackage($value)    {        $this-&gt;values[&#39;package&#39;] = $value;    }    /**     * 设置签名方式     * @param string $value     **/    public function SetPaySign($value)    {        $this-&gt;values[&#39;sign&#39;] = $value;    }}</code></pre><p>回调处理的示列</p><pre><code class="php">$WxPay = new \WxPayResults();header(&#39;Content-type: text/xml&#39;);$returnResult = $GLOBALS[&#39;HTTP_RAW_POST_DATA&#39;]; //接收微信发送的信息$res = $WxPay::Init($returnResult);if(res[&#39;result_code&#39;] == &#39;SUCCESS&#39;){/** 业务处理*/$success = &quot;&lt;xml&gt;&lt;return_code&gt;&lt;![CDATA[SUCCESS]]&gt;&lt;/return_code&gt;&lt;return_msg&gt;&lt;![CDATA[OK]]&gt;&lt;/return_msg&gt;&lt;/xml&gt;&quot;;exit($success);//回调结果通知}</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;第一步：申请微信APP支付&lt;br&gt;微信开放平台是商户APP接入微信支付开放接口的申请入口，通过此平台可申请微信APP支付。&lt;br&gt;
    
    </summary>
    
    
      <category term="PHP" scheme="http://yoursite.com/tags/PHP/"/>
    
      <category term="微信支付" scheme="http://yoursite.com/tags/%E5%BE%AE%E4%BF%A1%E6%94%AF%E4%BB%98/"/>
    
  </entry>
  
  <entry>
    <title>Vue+tp5简单列表操作</title>
    <link href="http://yoursite.com/2018/03/06/vtpro/"/>
    <id>http://yoursite.com/2018/03/06/vtpro/</id>
    <published>2018-03-06T15:58:36.000Z</published>
    <updated>2018-05-27T13:19:44.952Z</updated>
    
    <content type="html"><![CDATA[<p>前段时间，初次使用前端框架Vue和ThinkPHP5.1，于是就简单结合起来，用Vue+axios发送请求，TP5处理接口数据。<br>这里Vue、axios和TP5等等的安装就不多说了，按照官方文档来就ok了。<br><a id="more"></a><br>Vue部分，在main.js中引入axios,qs来帮助处理数据，接口请求的时候会遇到跨域问题</p><pre><code class="javascript">import axios from &#39;axios&#39;import Qs from &#39;qs&#39;Vue.prototype.$axios = axios;Vue.config.productionTip = falsevar axios_instance = axios.create({transformRequest: [function (data) {data = Qs.stringify(data);return data;}],//Post请求传递参数时，需要在请求头加上item.ContentType = &quot;application/x-www-form-urlencoded&quot;;headers:{&#39;Content-Type&#39;:&#39;application/x-www-form-urlencoded&#39;}})Vue.prototype.$axios = axios_instance;</code></pre><p>PHP部分后端响应头进行设置</p><pre><code class="php">// 指定允许其他域名访问header(&quot;Access-Control-Allow-Origin:*&quot;);// 响应类型header(&quot;Access-Control-Allow-Methods:GET, POST, PATCH, PUT, DELETE&quot;);// 响应头设置header(&quot;Access-Control-Allow-Headers:x-requested-with,content-type&quot;);</code></pre><p>解决了跨域问题后，接下来就能通过接口请求和数据处理了。</p><p>在Vue的/config/dev.env.js 设置 API_HOST</p><pre><code class="javascript">&#39;use strict&#39;const merge = require(&#39;webpack-merge&#39;)const prodEnv = require(&#39;./prod.env&#39;)module.exports = merge(prodEnv, {NODE_ENV: &#39;&quot;development&quot;&#39;,API_HOST:&#39;&quot;http://127.0.0.1/tp5/&quot;&#39;})</code></pre><p>下面是一个简单的列表，包含简单的增删改查，查看单条数据等功能<br><img src="/2018/03/06/vtpro/list.png"><br>列表部分代码</p><pre><code class="html">&lt;template&gt;    &lt;div class=&quot;list-table&quot;&gt;        &lt;h1&gt;TODO-LIST&lt;/h1&gt;        &lt;form&gt;            姓名：&lt;input type=&quot;text&quot; v-model=&quot;nickname&quot;/&gt; {{nickname}}            &lt;br/&gt;            年龄：&lt;input type=&quot;text&quot; v-model=&quot;age&quot;/&gt;  {{age}}            &lt;br/&gt;            &lt;span style=&quot;color:red&quot; v-if=&quot;!isAge&quot;&gt;年龄必须是数字&lt;/span&gt;            &lt;br/&gt;            &lt;br/&gt;            &lt;button type=&quot;button&quot; @click=&quot;addList&quot;&gt;添加&lt;/button&gt;            &lt;button type=&quot;button&quot; @click=&quot;init()&quot;&gt;重置&lt;/button&gt;        &lt;/form&gt;        &lt;br/&gt;        &lt;table border=&quot;1&quot; cellspacing=&quot;0&quot;&gt;            &lt;thead&gt;                &lt;th&gt;序号&lt;/th&gt;                &lt;th&gt;姓名&lt;/th&gt;                &lt;th&gt;年龄&lt;/th&gt;                &lt;th&gt;操作&lt;/th&gt;            &lt;/thead&gt;            &lt;tr v-for=&quot;(data,index) in  list&quot;&gt;                &lt;td&gt;{{index+1}}&lt;/td&gt;                &lt;td&gt;{{data.nickname}}&lt;/td&gt;                &lt;td&gt;{{data.age}}&lt;/td&gt;                &lt;td&gt;                    &lt;button @click=&quot;detail(index)&quot;&gt;查看详情&lt;/button&gt;                    &lt;button @click=&quot;delList(index)&quot;&gt;删除&lt;/button&gt;                &lt;/td&gt;            &lt;/tr&gt;            &lt;tr&gt;                &lt;td colspan=&quot;2&quot; style=&quot;text-align: center&quot;&gt;总年龄：&lt;/td&gt;                &lt;td&gt;{{sumAge}}&lt;/td&gt;                &lt;td&gt;&lt;button @click=&quot;controlList&quot;&gt;清空/还原&lt;/button&gt;&lt;/td&gt;            &lt;/tr&gt;        &lt;/table&gt;    &lt;/div&gt;&lt;/template&gt;&lt;script&gt;export default {    name:&quot;TODOList&quot;    data () {        return {            //姓名            nickname:&quot;&quot;,            //年龄            age:&quot;&quot;,            //age是数字            isAge:true,            list: [],        }    },    created(){        this.getList()    },    methods:{    /**    * 获取列表数据    */    getList: function () {        let $this = this;        this.$axios.get(process.env.API_HOST)        .then(function(response){        $this.list = response.data;        console.log(response.data);        })        .catch(function (error) {        console.log(error);        });    },    /**    * 新增列表数据    */    addList:function(){        let $this = this;        if(!this.isAge){            return false;        }        if($this.nickname &amp;&amp; $this.age){            $this.$axios.get(process.env.API_HOST + &#39;index/index/addList&#39;,{                params: {                    nickname: $this.nickname,                    age: $this.age                }            }).then(function (response) {                console.log(response.data);                $this.list.push({                    nickname:response.data.nickname,                    age:response.data.age                });            }).catch(function (error) {                console.log(error);            });        }    },    /**    * 删除列表数据    * @param index  list键值    */    delList:function(index){        let $this = this;        if(confirm(&#39;确定要删除吗&#39;)){            if($this.list[index] != undefined){                $this.$axios.post(process.env.API_HOST + &#39;index/index/delList&#39;,{                    nickname: $this.list[index].nickname                    }).then(function (response) {                        if(response.data==&#39;操作成功&#39;){                            $this.list.splice(index,1);                        }                }).catch(function (error) {                    console.log(error);                });            }        }    },    /**    * 清空或还原列表数据    */    controlList:function(){        if(confirm(&#39;确定要执行此操作吗&#39;)){            this.$axios.post(process.env.API_HOST + &#39;index/index/controlList&#39;).then(response=&gt;{                if(response.data==&#39;&#39;){                    this.list.splice(0,this.list.length);                }else{                    for (var i in response.data) {                        this.list.push({                        nickname:response.data[i].nickname,                        age:response.data[i].age                    });                    }                }            }).catch(function (error) {                console.log(error);            });;        }    },    detail:function(index){        this.$router.push({path:&#39;/detail&#39;,query: {nickname: this.list[index].nickname}})    },    /**    * 初始化输入    */    init:function(){        this.nickname = &quot;&quot;;        this.age = &quot;&quot;;        this.isAge = true;    },    /**    * 检测数字    * @param theObj       要检测的字符串    * @returns {boolean}  是数字放回true  不是返回false    */    checkNumber:function(theObj) {        var reg = /^[0-9]+$/;        if(reg.test(theObj)){            return true;        };            return false;        }    },    computed:{        sumAge:function(){            var ages = 0;            for (var i in this.list) {                ages += Number(this.list[i].age);            }            return ages;        }    },    watch:{        age:{            /**            * 监听age的变化            * @param newValue            * @param oldValue            * @returns {boolean}            */            handler(newValue, oldValue){                if(newValue == &quot;&quot;){                    this.isAge = true;                    return true;                }                var res = this.checkNumber(newValue);                if(res){                    this.isAge = true;                }else{                    this.isAge = false;                }            }        }    }}&lt;/script&gt;&lt;style&gt;    .list-table{        width: 100%;    }    .list-table table{        margin: 0 auto;        width: 500px;    }    .list-table table th{        font-size: 28px;    }    .list-table table td{        padding: 5px 0;        font-size: 20px;    }&lt;/style&gt;</code></pre><img src="/2018/03/06/vtpro/detail.png"><p>详情部分代码</p><pre><code class="html">&lt;template&gt;&lt;div class=&quot;list-table&quot;&gt;    &lt;h1&gt;{{msg}}&lt;/h1&gt;    &lt;table border=&quot;1&quot; cellspacing=&quot;0&quot;&gt;    &lt;thead&gt;        &lt;th&gt;用户UID&lt;/th&gt;        &lt;th&gt;姓名&lt;/th&gt;        &lt;th&gt;年龄&lt;/th&gt;    &lt;/thead&gt;    &lt;tr&gt;        &lt;td&gt;{{uid}}&lt;/td&gt;        &lt;td&gt;{{nickname}}&lt;/td&gt;        &lt;td&gt;{{age}}&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;        &lt;td colspan=&quot;2&quot;&gt;信息介绍&lt;/td&gt;        &lt;td&gt;            &lt;button type=&quot;button&quot; @click=&quot;OpenModal&quot;&gt;添加/编辑信息&lt;/button&gt;        &lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;        &lt;td colspan=&quot;3&quot; v-if=&quot;info&quot;&gt;{{info}}&lt;/td&gt;    &lt;/tr&gt;    &lt;/table&gt;    &lt;router-link to=&quot;/list&quot;&gt;返回&lt;/router-link&gt;        &lt;div class=&quot;open-box&quot; v-if=&quot;OpenShow&quot;&gt;            &lt;div class=&quot;open-box-content&quot;&gt;                &lt;h3&gt;编辑信息&lt;/h3&gt;                &lt;p&gt;请输入您的个人信息&lt;/p&gt;                &lt;textarea v-model=&quot;info&quot;&gt;{{info}}&lt;/textarea&gt;                &lt;div class=&quot;open-box-btn&quot;&gt;                    &lt;div class=&quot;open-box-btn-left&quot;&gt;                        &lt;button @click=&quot;addinfo&quot;&gt;保存&lt;/button&gt;                    &lt;/div&gt;                    &lt;div class=&quot;open-box-btn-right&quot;&gt;                        &lt;button @click=&quot;ColseModal&quot;&gt;关闭&lt;/button&gt;                    &lt;/div&gt;                &lt;/div&gt;            &lt;/div&gt;         &lt;/div&gt;&lt;/div&gt;&lt;/template&gt;&lt;script&gt;export default {    name: &#39;Detail&#39;,    data () {        return {        msg: &#39;信息详情&#39;,        uid:&#39;&#39;,        //姓名        nickname:&quot;&quot;,        //年龄        age:&quot;&quot;,        OpenShow: false,        info:&#39;&#39;        }    },    created(){        this.getinfo()    },    methods:{    /**    * 获取信息    */        getinfo: function () {        let $this = this;        this.$axios.get(process.env.API_HOST+&#39;index/index/getInfo&#39;,{        params:{nickname:this.$route.query.nickname}    })    .then(function(response){        $this.nickname = response.data.nickname        $this.age = response.data.age        $this.uid = response.data.uid        $this.info = response.data.info        console.log(response.data);    })    .catch(function (error) {        console.log(error);    });    },     /**     * 编辑信息     */      addinfo: function(){        this.$axios.post(process.env.API_HOST+&#39;index/index/addInfo&#39;,{        info:this.info,        uid:this.uid    })    .then(response=&gt;{        alert(response.data)        this.OpenShow = !this.OpenShow    })    .catch(function(error){        console.log(error);    });    },    OpenModal() {        this.OpenShow = !this.OpenShow    },    ColseModal() {        this.OpenShow = !this.OpenShow    }    }}&lt;/script&gt;&lt;style&gt;.list-table{width: 100%;}.list-table table{margin: 0 auto;.../*样式部分省略*//*弹窗样式*/.open-box {position: fixed;background: rgba(0, 0, 0, 0.4);width: 100%;height: 100%;left: 0;top: 0;z-index: 100;color: #fff;.../*样式部分省略*/&lt;/style&gt;</code></pre><p>TP5中相应的代码做数据库处理</p><pre><code class="php">    /**    * 获取列表数据    */    public function index()    {        $res = model(&#39;Member&#39;)-&gt;getUserList();        return $res;    }    /**    * 新增列表数据    */    public function addList(){        $nickname=Input(&#39;nickname&#39;);        $age=Input(&#39;age&#39;,0,&#39;floatval&#39;);        $res = model(&#39;Member&#39;)-&gt;save([            &#39;nickname&#39;=&gt;$nickname,            &#39;age&#39;=&gt;$age,            &#39;status&#39;=&gt;1        ]);        if($res){            $data=[&#39;nickname&#39;=&gt;$nickname,&#39;age&#39;=&gt;$age];            $data = json_encode($data);            return $data;        }    }    /**    * 删除列表数据    */    public function delList(){        $nickname=Input(&#39;nickname&#39;);        model(&#39;Member&#39;)-&gt;save([&#39;status&#39;=&gt;-1],[&#39;nickname&#39;=&gt;$nickname]);        return &#39;操作成功&#39;;    }    /**    * 清空还原列表数据    */    public function controlList(){        if(!model(&#39;Member&#39;)-&gt;where([&#39;status&#39;=&gt;1])-&gt;count()){            model(&#39;Member&#39;)-&gt;save([&#39;status&#39;=&gt;1],[&#39;status&#39;=&gt;-1]);            $res = model(&#39;Member&#39;)-&gt;getUserList();            return $res;        }else{            model(&#39;Member&#39;)-&gt;save([&#39;status&#39;=&gt;-1],[&#39;status&#39;=&gt;1]);            return &#39;&#39;;        }    }    /**    * 获取信息    */    public function getInfo(){        $nickname=Input(&#39;nickname&#39;);        $info = model(&#39;Member&#39;)-&gt;where([&#39;nickname&#39;=&gt;$nickname])-&gt;find();        return $info;    }    /**    * 编辑信息    */    public function addInfo(){        $info = Input(&#39;info&#39;);        $uid = Input(&#39;uid&#39;);        $res = model(&#39;Member&#39;)-&gt;save([&#39;info&#39;=&gt;$info],[&#39;uid&#39;=&gt;$uid]);        if($res){            return &#39;编辑成功&#39;;        }    }</code></pre><p>数据表结构</p><pre><code class="sql">---- 表的结构 `list_member`--CREATE TABLE IF NOT EXISTS `list_member` (  `uid` int(11) NOT NULL AUTO_INCREMENT,  `nickname` varchar(10) NOT NULL,  `age` int(11) NOT NULL,  `status` tinyint(4) NOT NULL,  `info` varchar(200) NOT NULL,  PRIMARY KEY (`uid`)) ENGINE=MyISAM  DEFAULT CHARSET=utf8 AUTO_INCREMENT=1 ;</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前段时间，初次使用前端框架Vue和ThinkPHP5.1，于是就简单结合起来，用Vue+axios发送请求，TP5处理接口数据。&lt;br&gt;这里Vue、axios和TP5等等的安装就不多说了，按照官方文档来就ok了。&lt;br&gt;
    
    </summary>
    
    
      <category term="PHP" scheme="http://yoursite.com/tags/PHP/"/>
    
      <category term="Vue" scheme="http://yoursite.com/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>shadowsocks</title>
    <link href="http://yoursite.com/2018/02/28/shadowsocks/"/>
    <id>http://yoursite.com/2018/02/28/shadowsocks/</id>
    <published>2018-02-27T16:30:31.000Z</published>
    <updated>2018-05-27T13:17:27.326Z</updated>
    
    <content type="html"><![CDATA[<p>VPS服务器超简单搭建shadowsocks 方法<br>vultr服务器购买：<a href="https://www.vultr.com/" target="_blank" rel="noopener">https://www.vultr.com/</a><br>安装Xshell，安装完成后新建会话（Alt+N），协议选择SSH，主机填写之前的IP Address，端口号选择22。<br><a id="more"></a><br>VPS可以先升级</p><pre><code>yum -y update</code></pre><p>有些VPS 没有wget<br>这种要先装</p><pre><code>yum -y install wget</code></pre><p>输入以下命令：</p><pre><code>1.wget --no-check-certificate https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocks.sh2.chmod +x shadowsocks.sh3../shadowsocks.sh 2&gt;&amp;1 | tee shadowsocks.log</code></pre><p>第一行是下载命令，下载东西，第二行是修改权限，第三行是安装命令</p><pre><code>配置：密码：（默认是teddysun.com）端口：默认是8989然后按任意键安装，退出按 Ctrl+c</code></pre><p>安装完成会有一个配置</p><pre><code>Congratulations, shadowsocks install completed!Your Server IP:  ***** VPS的IP地址Your Server Port:  *****  你刚才设置的端口Your Password:  ****  你刚才设置的密码Your Local IP:  127.0.0.1 Your Local Port:  1080 Your Encryption Method:  aes-256-cfb Welcome to visit:https://teddysun.com/342.htmlEnjoy it!</code></pre><p>然后就可以用这些东西</p><p>VPS主机一键安装Google TCP BBR加速<br>因为VPS架构系统的不同，我们很多软件的安装、部署也是具有局限性的。比如搬瓦工以前都是OpenVZ架构，是不可以安装类似锐速、Google TCP BBR来给服务器加速的。在上周的时候，我们都有看到新增KVM架构方案，虽然还处于测试就阶段，但是也是可以购买的，数据中心在洛杉矶QN，最为主要的是KVM架构，我们可以安装Google TCP BBR工具。</p><p>在这篇文章中，将利用teddysun分享的一键Google TCP BBR安装工具脚本（<a href="https://teddysun.com/489.html）来部署到搬瓦工KVM" target="_blank" rel="noopener">https://teddysun.com/489.html）来部署到搬瓦工KVM</a> VPS中，看看速度是否提高。这样我们用来建站或者其他用途的速度应该还是可以提升的。</p><p>第一、系统支持<br>我们系统需要是CentOS 6+，Debian 7+，Ubuntu 12+，除了OpenVZ架构之外都支持，比如常规的KVM和XEN。</p><p>第二、一键脚本安装</p><pre><code>wget --no-check-certificate https://github.com/teddysun/across/raw/master/bbr.shchmod +x bbr.sh./bbr.sh</code></pre><p>自动安装，然后最后提示我们需要重启生效。</p><p>第三、检查BBR启动<br>1、检查核心</p><pre><code>uname -r</code></pre><p>检查内核是不是4.10，检测后看到的是”4.10.5-1.el6.elrepo.x86_64”。</p><p>2、执行后返回<br>“net.ipv4.tcp_available_congestion_control = bbr cubic reno”</p><pre><code>sysctl net.ipv4.tcp_available_congestion_control</code></pre><p>3、执行后返回<br>“net.ipv4.tcp_congestion_control = bbr”</p><pre><code>sysctl net.ipv4.tcp_congestion_control</code></pre><p>4、查看返回值”net.core.default_qdisc = fq”</p><pre><code>sysctl net.core.default_qdisc</code></pre><p>5、看到有BBR信息。说明安装成功了。</p><pre><code>lsmod | grep bbr</code></pre><p>这样，在安装完毕BBR之后，我们去建站等用途的时候，应该是速度有提高的。</p><h3 id="shadowsocks下载"><a href="#shadowsocks下载" class="headerlink" title="shadowsocks下载"></a>shadowsocks下载</h3><h4 id="Android-Google-Play"><a href="#Android-Google-Play" class="headerlink" title="Android  Google Play:"></a>Android  Google Play:</h4><p><a href="http://ossfiles.fyvps.com/ssclient/shadowsocks-nightly-4.2.5.apk" target="_blank" rel="noopener">http://ossfiles.fyvps.com/ssclient/shadowsocks-nightly-4.2.5.apk</a></p><h4 id="iOS-App-Store"><a href="#iOS-App-Store" class="headerlink" title="iOS  App Store:"></a>iOS  App Store:</h4><p>Shadowrocket   黑洞  Detour   Shadowing    Shadowing    Shadowfish (复制任意一个到应用商店尝试搜索下载)</p><h4 id="Mac-OS-X-系统："><a href="#Mac-OS-X-系统：" class="headerlink" title="Mac OS X 系统："></a>Mac OS X 系统：</h4><p><a href="http://ossfiles.fyvps.com/ssclient/ShadowsocksX-NG-1.4.zip" target="_blank" rel="noopener">http://ossfiles.fyvps.com/ssclient/ShadowsocksX-NG-1.4.zip</a></p><h4 id="For-Windows"><a href="#For-Windows" class="headerlink" title="For Windows:"></a>For Windows:</h4><p><a href="http://ossfiles.fyvps.com/ssclient/Shadowsocks-4.0.6.zip" target="_blank" rel="noopener">http://ossfiles.fyvps.com/ssclient/Shadowsocks-4.0.6.zip</a></p><h4 id="Linux-客户端-shadowsocks-qt5-版本"><a href="#Linux-客户端-shadowsocks-qt5-版本" class="headerlink" title="Linux 客户端 ,shadowsocks-qt5 版本:"></a>Linux 客户端 ,shadowsocks-qt5 版本:</h4><p><a href="https://github.com/shadowsocks/shadowsocks-qt5/wiki" target="_blank" rel="noopener">https://github.com/shadowsocks/shadowsocks-qt5/wiki</a></p><h3 id="备用方式"><a href="#备用方式" class="headerlink" title="备用方式"></a>备用方式</h3><h4 id="脚本功能"><a href="#脚本功能" class="headerlink" title="脚本功能"></a>脚本功能</h4><p> 自定义端口号和密码</p><p> 全过程静默安装，不会打扰用户，你所要做的就是去听一首音乐或者去喝杯咖啡</p><p> 一次只允许运行一个shadowsocks进程，脚本会自动检测原来已经运行的进程并杀死</p><p> 安装防火墙并开放需要的端口</p><h4 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h4><p>下载脚本</p><pre><code>wget -O ss.sh http://45.32.195.77/file/ss.sh</code></pre><p>执行脚本</p><pre><code>bash ss.sh</code></pre><p>设置端口号并回车，直接回车是设置为1225</p><pre><code>Please enter PORT(1225 default):</code></pre><p>设置密码并回车，直接回车是设置为123456</p><pre><code>Please enter PASSWORD(123456 default):</code></pre><p>等待一会……就完成了（初次执行约2-5min）</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;VPS服务器超简单搭建shadowsocks 方法&lt;br&gt;vultr服务器购买：&lt;a href=&quot;https://www.vultr.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.vultr.com/&lt;/a&gt;&lt;br&gt;安装Xshell，安装完成后新建会话（Alt+N），协议选择SSH，主机填写之前的IP Address，端口号选择22。&lt;br&gt;
    
    </summary>
    
    
      <category term="shadowsocks" scheme="http://yoursite.com/tags/shadowsocks/"/>
    
  </entry>
  
  <entry>
    <title>CentOS7</title>
    <link href="http://yoursite.com/2018/02/27/centos/"/>
    <id>http://yoursite.com/2018/02/27/centos/</id>
    <published>2018-02-27T14:28:52.000Z</published>
    <updated>2018-05-27T12:54:30.750Z</updated>
    
    <content type="html"><![CDATA[<p>CentOS 7 安装配置LAMP服务器方法(Apache+PHP+MariaDB)<br>摘要: CentOS 7 安装配置LAMP服务器方法(Apache+PHP+MariaDB)，CentOS 7后Mysql改为MariaDB<br><a id="more"></a><br>准备篇：</p><p>一、配置防火墙，开启80端口、3306端口</p><p>CentOS 7 默认使用的是firewall作为防火墙，这里改为iptables防火墙。</p><p>1、关闭firewall：</p><pre><code>systemctl stop firewalld.service #停止firewall systemctl disable firewalld.service #禁止firewall开机启动</code></pre><p>2、安装iptables防火墙</p><pre><code>yum install iptables-services #安装 vi /etc/sysconfig/iptables #编辑防火墙配置文件</code></pre><pre><code># Firewall configuration written by system-config-firewall # Manual customization of this file is not recommended. *filter :INPUT ACCEPT [0:0] :FORWARD ACCEPT [0:0] :OUTPUT ACCEPT [0:0] -A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT -A INPUT -p icmp -j ACCEPT -A INPUT -i lo -j ACCEPT -A INPUT -m state --state NEW -m tcp -p tcp --dport 22 -j ACCEPT -A INPUT -m state --state NEW -m tcp -p tcp --dport 80 -j ACCEPT -A INPUT -m state --state NEW -m tcp -p tcp --dport 3306 -j ACCEPT -A INPUT -j REJECT --reject-with icmp-host-prohibited -A FORWARD -j REJECT --reject-with icmp-host-prohibited COMMIT :wq! #保存退出</code></pre><pre><code>systemctl restart iptables.service #最后重启防火墙使配置生效 systemctl enable iptables.service #设置防火墙开机启动</code></pre><p>二、关闭SELINUX</p><pre><code>vi /etc/selinux/config#SELINUX=enforcing #注释掉#SELINUXTYPE=targeted #注释掉SELINUX=disabled #增加:wq! #保存退出setenforce 0 #使配置立即生效</code></pre><p>安装篇：</p><p>一、安装Apache</p><pre><code>yum install httpd #根据提示，输入Y安装即可成功安装systemctl start httpd.service #启动apachesystemctl stop httpd.service #停止apachesystemctl restart httpd.service #重启apachesystemctl enable httpd.service #设置apache开机启动</code></pre><p>二、安装MariaDB</p><p>CentOS 7 中，已经使用MariaDB替代了MySQL数据库</p><p>1、安装MariaDB</p><pre><code>yum install mariadb mariadb-server #询问是否要安装，输入Y即可自动安装,直到安装完成systemctl start mariadb.service #启动MariaDBsystemctl stop mariadb.service #停止MariaDBsystemctl restart mariadb.service #重启MariaDBsystemctl enable mariadb.service #设置开机启动cp /usr/share/mysql/my-huge.cnf /etc/my.cnf #拷贝配置文件（注意：如果/etc目录下面默认有一个my.cnf，直接覆盖即可）</code></pre><p>2、为root账户设置密码</p><pre><code>mysql_secure_installation</code></pre><p>回车，根据提示输入Y</p><p>输入2次密码，回车</p><p>根据提示一路输入Y</p><p>最后出现：Thanks for using MySQL!</p><p>MySql密码设置完成，重新启动 MySQL：</p><pre><code>systemctl restart mariadb.service #重启MariaDB</code></pre><p>三、安装PHP</p><p>1、安装PHP 和 php-devel工具 方便日后使用 phpize 做扩展编译</p><pre><code>yum install php php-devel #根据提示输入Y直到安装完成</code></pre><p>2、安装PHP组件，使PHP支持 MariaDB</p><pre><code>yum install php-mysql php-gd libjpeg* php-ldap php-odbc php-pear php-xml php-xmlrpc php-mbstring php-bcmath php-mhash</code></pre><p>这里选择以上安装包进行安装，根据提示输入Y回车</p><pre><code>systemctl restart mariadb.service #重启MariaDBsystemctl restart httpd.service #重启apache</code></pre><p>注意：apache默认的程序目录是/var/www/html</p><p>权限设置：</p><pre><code>chown -R apache:apache  /var/www/html</code></pre><p>至此，CentOS 7.0安装配置LAMP服务器(Apache+PHP+MariaDB)教程完成！<br>原文链接：<a href="https://my.oschina.net/sallency/blog/467647" target="_blank" rel="noopener">https://my.oschina.net/sallency/blog/467647</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;CentOS 7 安装配置LAMP服务器方法(Apache+PHP+MariaDB)&lt;br&gt;摘要: CentOS 7 安装配置LAMP服务器方法(Apache+PHP+MariaDB)，CentOS 7后Mysql改为MariaDB&lt;br&gt;
    
    </summary>
    
    
      <category term="CentOS" scheme="http://yoursite.com/tags/CentOS/"/>
    
  </entry>
  
</feed>
